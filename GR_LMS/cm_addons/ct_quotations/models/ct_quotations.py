# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
from odoo.addons.custom_properties.decorators import validation,valid_mobile_no,valid_email
import time
from datetime import datetime
from odoo.exceptions import UserError

CT_QUOTATIONS = 'ct.quotations'
RES_USERS = 'res.users'
TIME_FORMAT = '%Y-%m-%d %H:%M:%S'
IR_CONFIG_PARAMETER = 'ir.config_parameter'
IR_SEQUENCE = 'ir.sequence'
CM_PORT = 'cm.port'
CM_DEPOT_LOCATION = 'cm.depot.location'
CM_TRANSPORT_LOCATION = 'cm.transport.location'
CM_CITY = 'cm.city'

CUSTOM_STATUS = [
    ('draft', 'Draft'),
    ('wfa', 'WFA'),
    ('quotation_sent', 'Quotation Sent'),
    ('order_released', 'Order Released '),    
    ('revised', 'Revised'),
    ('cancelled', 'Cancelled')]

ENTRY_MODE =  [('manual','Manual'),
               ('auto', 'Auto')]

APPLICABLE_OPTION = [('applicable', 'Applicable'),
                     ('not_applicable', 'Not Applicable')]

YES_OR_NO = [('yes', 'Yes'), ('no', 'No')]

TANK_T_CODE = [('t1','T1'),('t2','T2'),('t3','T3'),('t4','T4'),('t5','T5'),('t6','T6'),('t7','T7'),('t8','T8'),('t9','T9'),('t10','T10'),
               ('t11', 'T11'),('t12', 'T12'),('t13', 'T13'),('t14', 'T14'),('t15', 'T16'),('t17', 'T17'),('t18', 'T18'),('t19', 'T19'),('t20', 'T20'),
               ('t21', 'T21'),('t22', 'T22'),('t23', 'T23'),('t50', 'T50'),('t75', 'T75')]

CONTAINER_CATEGORY = [('laden','Laden'), ('empty', 'Empty')]

TRAILER_TYPE = [('20_feet', '20 Feet'), ('40_feet', '40 Feet'), ('both', 'Both')]

POD_SERVICES = [('disposal', 'Disposal'), ('discharge', 'Discharge'), ('both', 'Both'), ('not_required', 'Not Required')]

INSURANCE = [('customer', 'Customer'), ('gmpl', 'GMPL')]

LOCATION = [('pan_india', 'PAN India'), ('exim', 'Exim(Global)')]

PERIOD_CHOICES = [('day', 'Day'), ('month', 'Month'), ('year', 'Year')]

class CtQuotations(models.Model):
    _name = 'ct.quotations'
    _description = 'Quotations'
    _inherit = ['mail.thread', 'mail.activity.mixin', 'avatar.mixin']
    _order = 'entry_date desc,name desc'

    name = fields.Char(string="Quotation No", readonly=True, index=True, size=30, c_rule=True)
    entry_date = fields.Date(string="Entry Date", default=fields.Date.today)
    enquiry_no = fields.Char(string="Enquiry No", readonly=True, size=30) #TODO
    service_id = fields.Many2one('cm.service', string="Service Name", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    generated_user_id = fields.Many2one(RES_USERS, string="Generated By", copy=False, default=lambda self: self.env.user.id, ondelete='restrict')
    enq_source_id = fields.Many2one('cm.enquiry.source', string="Enquiry Source", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    ref_no = fields.Char(string="Customer Reference", size=15, tracking=True)
    bkg_party_id = fields.Many2one('cm.customer', string="Booking Party", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    new_bkg_party = fields.Char(string="New Booking Party")
    bus_vert_id = fields.Many2one('cm.business.vertical', string="Business Vertical", ondelete='restrict',domain=[('status', '=', 'active'),('active_trans', '=', True)])
    contact_person = fields.Char(string="Contact Person", size=50)
    mobile_no = fields.Char(string="Mobile No", size=15)
    email = fields.Char(string="Email", size=252)
    shipper_cus_id = fields.Many2one('cm.customer', string="Actual Shipper / Customer", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    new_shipper = fields.Char(string="New Shipper")
    agent_id = fields.Many2one('cm.agent', string="Agent Name", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    rebate = fields.Selection(selection=APPLICABLE_OPTION, string="Rebate")
    cust_rate = fields.Float(string="Customer Indicated Rate")
    currency_id = fields.Many2one('res.currency', string="Currency", ondelete='restrict', tracking=True, domain=[('status', '=', 'active'),('active_trans', '=', True)])
    expiry_date = fields.Date(string="Expiry Date")


    product_id = fields.Many2one('cm.product', string="Product Name", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    product = fields.Char(string="New Product Name")
    dg_product = fields.Selection(selection=YES_OR_NO, string="Dangerous Goods")
    un_no = fields.Char(string="UN Number")
    sub_class1 = fields.Char(string="Sub Class I", size=5)
    sub_class2 = fields.Char(string="Sub Class II", size=5)
    tank_t_code = fields.Selection(selection=TANK_T_CODE, string="Tank T Code")
    tank_capacity = fields.Integer(string="Tank Capacity(KL)")
    tank_qty = fields.Integer(string="Tank Quantity(TEUS)")
    container_category = fields.Selection(selection=CONTAINER_CATEGORY, string="Empty / Laden", default='laden', c_rule=True)
    service_ids = fields.Many2many('cm.service', string="Additional Services", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    spl_req = fields.Text(string="Special Requirements")


    ship_term_id = fields.Many2one('cm.shipment.term', string="Shipment Term", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    net_rental = fields.Boolean(string="Net Rental")
    switch_bl_req = fields.Selection(selection=YES_OR_NO, string="Switch BL Required")
    pol_port_id = fields.Many2one(CM_PORT, string="POL", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    pod_port_id = fields.Many2one(CM_PORT, string="POD", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    pol_terminal_id = fields.Many2one('cm.port.terminal', string="POL Terminal", ondelete='restrict', domain="[('status', '=', 'active'),('active_trans', '=', True),('port_id', '=', pol_port_id)]")
    pod_terminal_id = fields.Many2one('cm.port.terminal', string="POD Terminal", ondelete='restrict', domain="[('status', '=', 'active'),('active_trans', '=', True),('port_id', '=', pod_port_id)]")    
    pol_free_days = fields.Integer(string="POL Free Days")
    pod_free_days = fields.Integer(string="POD Free Days")
    trip_pickup_depot_id = fields.Many2one(CM_DEPOT_LOCATION, string="Pick Up Depot Location", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    
    
    
    lease_period = fields.Integer(string="Lease Period")
    period_choices = fields.Selection(selection=PERIOD_CHOICES, string="Period Choices")
    pickup_port_id = fields.Many2one(CM_PORT, string="Pick Up Port Location", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    pickup_depot_id = fields.Many2one(CM_DEPOT_LOCATION, string="Pick Up Depot Location", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    drop_port_id = fields.Many2one(CM_PORT, string="Drop Off Port Location", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    drop_depot_id = fields.Many2one(CM_DEPOT_LOCATION, string="Drop Off Depot Location", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])



    gr_dep_id = fields.Many2one('cm.department', string="GR Department Name", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    prod_weight_kg = fields.Integer(string="Product Weight(Kgs)")
    dotr_pod_free_days = fields.Integer(string="POD Free Days")
    dotr_pol_free_days = fields.Integer(string="POL Free Days")
    trailer_type = fields.Selection(selection=TRAILER_TYPE, string="Trailer Type", default='20_feet')
    free_hrs = fields.Integer(string="Free Hrs", default=24)
    trans_route_id = fields.Many2one('cm.transport.route', string="Route Name", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    from_trans_loc_id = fields.Many2one(CM_TRANSPORT_LOCATION, string="From Location", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    from_city_id = fields.Many2one('cm.city', string="From City", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    from_state_id = fields.Many2one('res.country.state', string="From State", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    to_trans_loc_id = fields.Many2one(CM_TRANSPORT_LOCATION, string="To Location", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    to_city_id = fields.Many2one('cm.city', string="To City", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    to_state_id = fields.Many2one('res.country.state', string="To State", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    trip_start_date = fields.Date(string="Tentative Trip Start Date")
    trans_pickup_depot_id = fields.Many2one(CM_DEPOT_LOCATION, string="Pick Up Depot Location", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    empty_pickup_loc_id = fields.Many2one(CM_TRANSPORT_LOCATION, string="Empty Pickup Location", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    load_address = fields.Char(string="Loading Address", size=252)
    load_zip_code = fields.Char(string="Exact Loading Location Zip Code", size=10)
    unload_address = fields.Char(string="Unloading Address", size=252)
    unload_zip_code = fields.Char(string="Exact Unloading Location Zip Code", size=10)
    empty_offload_loc_id = fields.Many2one(CM_TRANSPORT_LOCATION, string="Empty Off Loading Location", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])



    flexi_bag_type_id = fields.Many2one('product.template', string="Flexi Bag Type", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True),('custom_type', '=', 'flexi_bag')])
    bag_qty = fields.Float(string="Bag Quantity(Nos)", digits=(2, 3))
    del_address = fields.Char(string="Delivery Address", size=252)
    city_id = fields.Many2one(CM_CITY, string="City", ondelete='restrict', domain="[('status', '=', 'active'),('active_trans', '=', True)]")
    same_as_delivery = fields.Boolean(string="Same As Delivery Address")
    stuff_address = fields.Char(string="Exact Stuffing Address", size=252)
    bag_req_date = fields.Date(string="Bag Required Date")
    vendor_id = fields.Many2one('cm.vendor.master', string="Preferred Supplier", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    accessories_req = fields.Selection(selection=YES_OR_NO, string="Accessories Required", default='yes')
    pod_services = fields.Selection(selection=POD_SERVICES, string="POD Services")


    flexi_stuff_qty = fields.Float(string="Flexi Stuffing Qty", digits=(2, 3))	    
    stuff_date = fields.Date(string="Stuffing Date")


    carrier_id = fields.Many2one('cm.carrier', string="Carrier Name", ondelete='restrict',domain=[('status', '=', 'active'),('active_trans', '=', True)])
    insurance = fields.Selection(selection=INSURANCE, string="Insurance", default='customer')
    tank_test_cert_ids = fields.Many2many('ir.attachment', string="Tank Periodic Test Certificate", ondelete='restrict', check_company=True)
    tank_clean_cert_ids = fields.Many2many('ir.attachment', 'quotations_tank_clean_cert', 'enq_id', 'ir_attach_id', string="Tank Cleaning Certificate", ondelete='restrict', check_company=True)
    remarks = fields.Text(string="Remarks")
    quotation_currency_id = fields.Many2one('res.currency', string="Quotation Currency", ondelete='restrict', tracking=True, domain=[('status', '=', 'active'),('active_trans', '=', True)])


    draft_name = fields.Char(string="Draft No", index=True, readonly=True, size=30)
    draft_date = fields.Date(string="Draft Date", default=fields.Date.today)
    executed_user_id = fields.Many2one(RES_USERS, string="Executed By", default=lambda self: self.env.user.id, ondelete='restrict', readonly=True)
    bus_location = fields.Selection(selection=LOCATION, string="Location")
    
    rep_is_required = fields.Selection(selection=YES_OR_NO, string="Reposition Is Required", default='no') #TODO
    overseas_port_id = fields.Many2one(CM_PORT, string="POL", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)]) #TODO
    rep_route_id = fields.Many2one('cm.vessel.service.route', string="Reposition Route", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)]) #TODO
    vessel_route_id = fields.Many2one('cm.vessel.service.route', string="Vessel Service Route", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)]) #TODO
    estimated_days = fields.Integer(string="Estimated Days") #TODO
    cleaning_days = fields.Integer(string="Cleaning / Repair / Booking Days", default=15) #TODO
    tot_days = fields.Integer(string="Total Days", compute='_compute_tot_days') #TODO
    per_day_cost = fields.Float(string="Per Day Cost", compute='_compute_per_day_cost') #TODO  
    markup_value = fields.Float(string="Markup Value") #TODO
    customer_value = fields.Float(string="Customer Price", compute='_compute_customer_value') #TODO  
    tot_transit_days = fields.Integer(string="Total Transit Days") #TODO
    tot_trip = fields.Integer(string="Total Trip KM") #TODO
    
    

    rej_remark_id = fields.Many2one('cm.rejection.remark', string="Rejection Remark", ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    cancel_remark = fields.Text(string="Cancel Remarks")
    remarks = fields.Text(string="Remarks")
    status = fields.Selection(selection=CUSTOM_STATUS, string="Status", default="draft", readonly=True, store=True, tracking=True)
    combined_codes = fields.Char(string="Combined Codes", readonly=True)
    revise_count = fields.Integer(string="Revise Count", readonly=True)
    parent_ref = fields.Char(string="Parent Ref", readonly=True, size=30)

    

    active = fields.Boolean(string="Visible", default=True)
    active_rpt = fields.Boolean(string="Visible In Reports", default=True)
    active_trans = fields.Boolean(string="Visible In Transactions", default=True)
    company_id = fields.Many2one('res.company', default=lambda self: self.env.company, ondelete='restrict', readonly=True, required=True)
    fy_control_date = fields.Date(string="FY Control Date", related='entry_date', store=True)
    entry_mode = fields.Selection(selection=ENTRY_MODE, string="Entry Mode", default="manual", readonly=True, tracking=True)
    user_id = fields.Many2one(RES_USERS, string="Created By", default=lambda self: self.env.user.id, ondelete='restrict', readonly=True)
    crt_date = fields.Datetime(string="Creation Date", default=fields.Datetime.now, readonly=True)
    confirm_user_id = fields.Many2one(RES_USERS, string="Confirmed By", copy=False, ondelete='restrict', readonly=True)
    confirm_date = fields.Datetime(string="Confirmed Date", copy=False, readonly=True)
    cancel_user_id = fields.Many2one(RES_USERS, string="Cancelled By", copy=False, ondelete='restrict', readonly=True)
    cancel_date = fields.Datetime(string="Cancelled Date", copy=False, readonly=True)
    update_user_id = fields.Many2one(RES_USERS, string="Last Updated By", copy=False, ondelete='restrict', readonly=True)
    update_date = fields.Datetime(string="Last Updated Date", copy=False, readonly=True)
    revise_remark = fields.Text(string="Revise Remarks", copy=False)
    ap_rej_date = fields.Datetime(string="Approved / Rejected Date", copy=False, readonly=True)
    ap_rej_user_id = fields.Many2one(RES_USERS, string="Approved By", copy=False, ondelete='restrict', readonly=True)
    revised_date = fields.Datetime(string="Revised Date", copy=False, readonly=True)
    revised_user_id = fields.Many2one(RES_USERS, string="Revised By", copy=False, ondelete='restrict', readonly=True)    

    
    tax_amt = fields.Float(string="Tax Amount", store=True, compute='_compute_all_line')	
    tot_amt = fields.Float(string="Total Amount", store=True, compute='_compute_all_line')	
    other_amt = fields.Float(string="Other Charges(+)", store=True, compute='_compute_all_line')
    disc_amt = fields.Float(string="Discount Amount(-)", store=True, compute='_compute_all_line')
    taxable_amt = fields.Float(string="Taxable Amount", store=True, compute='_compute_all_line')
    round_off_amt = fields.Float(string="Round Off Amount(+/-)", store=True, compute='_compute_all_line')	
    grand_tot_amt = fields.Float(string="Grand Total", store=True, compute='_compute_all_line')
    fixed_disc_amt = fields.Float(string="Fixed Discount Amount(-)", store=True, compute='_compute_all_line')
    net_amt = fields.Float(string="Net Amount", store=True, compute='_compute_all_line')
    add_service_cost = fields.Float(string="Additional Services Cost", store=True)
    manual_round_off = fields.Boolean(string="Apply Manual Round Off", default=False)    
    line_count = fields.Integer(string="Line Count", default=0, readonly=True, store=True, compute='_compute_all_line')
    is_parent = fields.Boolean(string="Parent Quotation", default=False)    

    
    line_ids = fields.One2many('ct.quotations.flexi.acc.line', 'header_id', string="Flexi Accessories", copy=True, c_rule=True)
    line_ids_a = fields.One2many('ct.quotations.attachment.line', 'header_id', string="Attachments", copy=True, c_rule=True)
    line_ids_b = fields.One2many('ct.quotations.flexi.bag.pricing.line', 'header_id', string="Flexi Bag Pricing", copy=True, c_rule=True)
    line_ids_c = fields.One2many('ct.quotations.pricing.details.line', 'header_id', string="Pricing Details", copy=True, c_rule=True)
    line_ids_d = fields.One2many('ct.quotations.add.services.cost.line', 'header_id', string="Additional Services Cost", copy=True, c_rule=True)
    line_ids_e = fields.One2many('ct.quotations.shipper.data.line', 'header_id', string="Shipper Business Data", copy=True, c_rule=True)
    line_ids_f = fields.One2many('ct.quotations.tax.line', 'header_id', string="Tax Breakup", copy=True, c_rule=True)
    line_ids_g = fields.One2many('ct.quotations.child.line', 'header_id', string="Quotation Details", copy=True, c_rule=True)


    @api.onchange('service_id', 'service_ids')
    def onchange_service_ids(self):
        codes = []
        if self.service_id:
            codes.append(self.service_id.sys_ref)
            self.bus_location = self.service_id.bus_location
            if self.service_id.sys_ref in ('ISTL', 'DOTL'):
                self.container_category = 'empty'
            else:
                 self.container_category = 'laden'
            self.rep_is_required = 'no'
        if self.service_ids:
            codes.extend(self.service_ids.mapped('sys_ref'))
        self.combined_codes = list(set(codes))

    @api.onchange('product_id')
    def onchange_product(self):
        if self.product_id:
            self.dg_product = self.product_id.dg_product
            self.un_no = self.product_id.un_no
            self.sub_class1 = self.product_id.sub_class1
            self.sub_class2 = self.product_id.sub_class2
            self.tank_t_code = self.product_id.tank_t_code
        else:
            self.dg_product = False
            self.un_no = False
            self.sub_class1 = False
            self.sub_class2 = False
            self.tank_t_code = False
    
    @api.onchange('trans_route_id')
    def onchange_route_name(self):
        if self.trans_route_id:
            self.from_trans_loc_id = self.trans_route_id.from_location_id.id
            self.to_trans_loc_id = self.trans_route_id.to_location_id.id
            self.tot_transit_days = self.trans_route_id.trip_days
            self.tot_trip = self.trans_route_id.total_trip
        else:
            self.from_trans_loc_id = False
            self.to_trans_loc_id = False
            self.tot_transit_days = False
            self.tot_trip = False           
    
    @api.onchange('from_trans_loc_id')
    def onchange_from_location(self):
        if self.from_trans_loc_id:
            self.from_city_id = self.from_trans_loc_id.city_id.id
            self.from_state_id = self.from_trans_loc_id.state_id.id
        else:
            self.from_city_id = False
            self.from_state_id = False
    
    @api.onchange('to_trans_loc_id')
    def onchange_to_location(self):
        if self.to_trans_loc_id:
            self.to_city_id = self.to_trans_loc_id.city_id.id
            self.to_state_id = self.to_trans_loc_id.state_id.id
        else:
            self.to_city_id = False
            self.to_state_id = False

    @api.onchange('bkg_party_id')
    def onchange_booking_party(self):
        if self.bkg_party_id:
            self.bus_vert_id = self.bkg_party_id.bus_vert_id.id
            self.contact_person = self.bkg_party_id.contact_person
            self.mobile_no = self.bkg_party_id.mobile_no
            self.email = self.bkg_party_id.email
        else:
            self.bus_vert_id = False
            self.contact_person = False
            self.mobile_no = False
            self.email = False

    @api.onchange('combined_codes')
    def onchange_combined_codes(self):
        if 'FLAS' not in self.combined_codes:
            self.line_ids = [(5, 0, 0)]
            
    @api.onchange('rep_is_required')
    def onchange_rep_is_required(self):
        if self.rep_is_required:
            self.overseas_port_id = False
            self.rep_route_id = False
    
    @api.onchange('same_as_delivery')
    def onchange_same_as_delivery(self):
        if self.same_as_delivery:
            self.stuff_address = self.del_address
        else:
            self.stuff_address = False
    
    @api.onchange('pol_port_id')
    def onchange_pol_port_id(self):
        if self.pol_port_id:
            record = self.env['cm.port.terminal'].search([('status', '=', 'active'), 
                      ('active_trans', '=', True), 
                      ('port_id', '=', self.pol_port_id.id)], limit=2)
            if record and len(record) == 1:
                self.pol_terminal_id = record.id
            else:
                self.pol_terminal_id = False

    @api.onchange('pod_port_id')
    def onchange_pod_port_id(self):
        if self.pod_port_id:
            record = self.env['cm.port.terminal'].search([('status', '=', 'active'), 
                      ('active_trans', '=', True), 
                      ('port_id', '=', self.pod_port_id.id)], limit=2)
            if record and len(record) == 1:
                self.pod_terminal_id = record.id
            else:
                self.pod_terminal_id = False

    def display_warnings(self, warning_msg, kw):
        if warning_msg:
            formatted_messages = "\n".join(warning_msg)
            if not kw.get('mode_of_call'):
                raise UserError(_(formatted_messages))
            else:
                return [formatted_messages]
        else:
            return False

    def check_negative_values(self, warning_msg):
        for field in self._fields.values():
            if isinstance(field, (fields.Integer, fields.Float)):
                value = getattr(self, field.name, None)
                if value is not None and value < 0:
                    field_label = field.string
                    warning_msg.append(f"{field_label} cannot be less than zero.")
                    
    def validate_fields(self, *fields):
        return not any(fields) or all(fields)

    def validations(self, **kw):
        warning_msg = []

        if self.validate_fields(self.bkg_party_id, self.new_bkg_party):
            warning_msg.append("Either booking party or new booking party only required, not both or neither.")
        if (self.shipper_cus_id or self.new_shipper) and self.validate_fields(self.shipper_cus_id, self.new_shipper):
            warning_msg.append("Either actual shipper/customer or new shipper only required, not both.")
        if self.validate_fields(self.product_id, self.product):
            warning_msg.append("Either product name or new product name only required, not both or neither.")
        if self.combined_codes and any(code in self.combined_codes for code in ('ISTL', 'DOTL')):
            if self.validate_fields(self.pickup_port_id, self.pickup_depot_id):
                warning_msg.append("Either pick up port location or pick up depot location only required, not both or neither.")
        if self.combined_codes and 'FLAS' in self.combined_codes and not self.line_ids:
                warning_msg.append("System not allow to confirm with empty flexi accessories details")
        
        self.check_negative_values(warning_msg)
        
        return self.display_warnings(warning_msg, kw)

    def sequence_no_validations(self, **kw):
        warning_msg = []
        action_code_map = {
            'confirm': CT_QUOTATIONS
        }

        action = kw.get('action')
        if action in action_code_map:
            sequence_code = action_code_map[action]
            sequence_id = self.env[IR_SEQUENCE].search([('code', '=', sequence_code)], limit=1)
            if not sequence_id:
                warning_msg.append("The ir sequence has not been created.")
        if kw.get('date'):
            self.env.cr.execute(
                """select value from ir_config_parameter 
                where key = 'custom_properties.seq_num_reset' 
                order by id desc limit 1;
            """)
            seq_reset = self.env.cr.fetchone()
            if not seq_reset or not seq_reset[0]:
                warning_msg.append("The sequence number reset option has not been configured in the custom settings.")
            elif seq_reset[0] == 'fiscal_year':
                fiscal_year = self.env['cm.fiscal.year'].search([
                                ('from_date', '<=', kw.get('date')),('to_date', '>=', kw.get('date')),
                                ('status', '=', 'active'),('active', '=', True)])
                if not fiscal_year:
                    warning_msg.append("The fiscal year has not been created.")

        return self.display_warnings(warning_msg, kw)
    
    
    def mail_send(self):
        pass
     
    def mail_preview(self):
        local_context = dict(
            self.env.context,
            email=self.email,
            name=self.name
        )
        return {
                'type': 'ir.actions.act_window',
                'name': "Mail Preview",
                'res_model': 'ct.quotations.mail.preview',
                'view_mode': 'form',
                'target': 'new',
                'context': local_context,
            }               

    def entry_confirm(self):
        if self.status == 'draft':
            self.validations()

            if not self.name:
                sequence_id = self.env[IR_SEQUENCE].search(
                        [('code', '=', CT_QUOTATIONS)], limit=1)
                if sequence_id:
                    self.env.cr.execute(
                        """select generatesequenceno(%s,%s,%s,%s,%s,%s) """,
                        (sequence_id.id,
                         sequence_id.code,
                         self.entry_date,
                         None,
                         None,
                         ''))
                    sequence = self.env.cr.fetchone()
                    sequence = sequence[0]
                else:
                    sequence = ''

                if not sequence:
                    self.sequence_no_validations(date=self.entry_date, action='confirm')

                self.name = sequence
            self.write({'status': 'wfa',
                        'confirm_user_id': self.env.user.id,
                        'confirm_date': time.strftime(TIME_FORMAT)
                        })
        return True

    def entry_approve(self):
        if self.status == 'wfa':
            self.validations()
            self.write({'status': 'quotation_sent',
                        'ap_rej_user_id': self.env.user.id,
                        'ap_rej_date': time.strftime(TIME_FORMAT)
                        })
        return True
    
    def entry_order_released(self):
        if self.status == 'quotation_sent':
            raise UserError("Order Released option in progress.")
        return True
    
    def _create_revise_line(self, draft_quotation, lines):
        if lines:
            for line in lines:
                line.copy_data({'header_id': draft_quotation.id})[0]
        return True   
    
    @api.depends('line_ids_c', 'round_off_amt', 'fixed_disc_amt', 'manual_round_off')
    def _compute_all_line(self):
        for data in self:            
            data.line_count = len(data.line_ids_c)
            data._compute_footer_calculation()
            type_tax_use_dict = data._initialize_tax_dict()
            data._process_line_items(data.line_ids_c, type_tax_use_dict)
            data.line_ids_f = [(5, 0, 0)]
            tax_values = []
            for tx_name, tx_amt in type_tax_use_dict.items():
                if tx_amt > 0:
                    tax_values.append((0,0,{'tax_name':tx_name,'tax_amt':tx_amt}))
            data.line_ids_f = tax_values  
     
    @api.depends('estimated_days', 'cleaning_days')        
    def _compute_tot_days(self):
        for data in self:
            data.tot_days = data.estimated_days + data.cleaning_days
            
    @api.depends('grand_tot_amt', 'tot_days')
    def _compute_per_day_cost(self):
        for data in self:
            data.per_day_cost = data.grand_tot_amt / data.tot_days if data.tot_days > 0 else 0  
            
    @api.depends('per_day_cost', 'markup_value')
    def _compute_customer_value(self):
        for data in self:
            data.customer_value = data.per_day_cost + data.markup_value      
      
            
    def _process_tax_line(self, line, tax_line, price_unit, qty, discount, price_subtotal, type_tax_use_dict):

        tax_value_return = self.env['account.tax']._convert_to_tax_base_line_dict(
                                            self,
                                            partner=False,
                                            currency= line.currency_id,
                                            product=  False,
                                            taxes=tax_line,
                                            price_unit=price_unit,
                                            quantity=qty,
                                            discount=discount,
                                            price_subtotal=price_subtotal,
                                        )
        tax_results = self.env['account.tax']._compute_taxes([tax_value_return])
        totals = next(iter(tax_results['totals'].values()))
        amount_tax = totals['amount_tax']

        type_tax_use_dict[tax_line.tax_group_id.name] += amount_tax

    def _process_line_items(self, line_items, tax_dict):
        for line in line_items:
            if line.unit_price > 0:
                for tax_line in line.tax_ids:
                    self._process_tax_line(line, tax_line, line.unit_price + line.markup_value, line.qty, line.disc_per, line.tot_amt, tax_dict)

    def _initialize_tax_dict(self):
        return {
            record['name']: 0
            for record in self.env['account.tax.group'].read_group([], ['name'], ['name'])
        }            
            
    def _compute_footer_calculation(self):
        for data in self:
            data.tot_amt = sum(data.line_ids_c.mapped('tot_amt'))
            data.disc_amt = sum(data.line_ids_c.mapped('disc_amt'))
            
            old_grand_total = data.taxable_amt + data.tax_amt

            data.taxable_amt = (data.tot_amt + data.other_amt) - data.disc_amt
            data.tax_amt = sum(data.line_ids_c.mapped('tax_amt'))

            if (old_grand_total != (data.taxable_amt + data.tax_amt)) or (not data.tot_amt):
                data.manual_round_off = False
                data.round_off_amt = 0.00
                data.fixed_disc_amt = 0.00
            
            if not data.manual_round_off:
                data.round_off_amt = round(data.taxable_amt + data.tax_amt) - (data.taxable_amt + data.tax_amt)
                data.round_off_amt = round(data.round_off_amt, 2)

            data.grand_tot_amt = data.taxable_amt + data.tax_amt + data.round_off_amt
            
            data.fixed_disc_amt = 0.00 if data.grand_tot_amt <= 0 else data.fixed_disc_amt
            
            data.net_amt = data.grand_tot_amt - data.fixed_disc_amt               
    
    def entry_revise(self):
        if self.status == 'quotation_sent':
            self.validations()
            min_char = self.env[IR_CONFIG_PARAMETER].sudo().get_param('custom_properties.min_char_length')
            if not self.revise_remark or (not self.revise_remark or not self.revise_remark.strip()):
                raise UserError(_("Revise remark is must. Kindly enter the revise remark in revise remark tab"))
            if self.revise_remark and len(self.revise_remark.strip()) < int(min_char):
                raise UserError(_(f"Minimum {min_char} characters are must for cancel remarks"))            
            if self.revise_count == 0:
               self.parent_ref = self.name
            revise_count = self.revise_count + 1
            draft_quotation = self.copy(default={
                'name': f"{self.parent_ref}-{ revise_count }",
                'status': 'draft',
                'revise_count': revise_count,
            })
            self._entry_revise_line(draft_quotation)
            self.write({'status': 'revised',
                        'revised_user_id': self.env.user.id,
                        'revised_date': time.strftime(TIME_FORMAT)
                        })
            return True  
                    
    def _entry_revise_line(self, draft_quotation):
        if self.line_ids:
            self._create_revise_line(draft_quotation, self.line_ids)
        if self.line_ids_a:                
            self._create_revise_line(draft_quotation, self.line_ids_a)
        if self.line_ids_b:
            self._create_revise_line(draft_quotation, self.line_ids_b)
        if self.line_ids_c:
            self._create_revise_line(draft_quotation, self.line_ids_c)
        if self.line_ids_d:
            self._create_revise_line(draft_quotation, self.line_ids_d)
        if self.line_ids_e:
            self._create_revise_line(draft_quotation, self.line_ids_e)
        return True                        
    
    def entry_cancel(self):
        if self.status in ('quotation_sent'):
            min_char = self.env[IR_CONFIG_PARAMETER].sudo().get_param('custom_properties.min_char_length')
            if not self.rej_remark_id or (not self.cancel_remark or not self.cancel_remark.strip()):
                raise UserError(_("Cancel reason is must. Kindly enter the cancel reason and remark in cancel reason tab"))
            if self.cancel_remark and len(self.cancel_remark.strip()) < int(min_char):
                raise UserError(_(f"Minimum {min_char} characters are must for cancel remarks"))
            self.write({'status': 'cancelled',
                        'cancel_user_id': self.env.user.id,
                        'cancel_date': time.strftime(TIME_FORMAT)
                        })
        return True

    def unlink(self):
        for rec in self:
            if rec.status != 'draft' or rec.entry_mode == 'auto':
                raise UserError(_("You can't delete other than manually created draft entries"))
            if rec.status == 'draft':
                is_mgmt = self.env[RES_USERS].has_group('cm_user_mgmt.group_mgmt_admin')
                if not is_mgmt:
                    res_config_rule = self.env[IR_CONFIG_PARAMETER].sudo().get_param('custom_properties.del_self_draft_entry')
                    if not res_config_rule and self.user_id != self.env.user and not(is_mgmt):
                        raise UserError(_("You can't delete other users draft entries"))
                models.Model.unlink(rec)
        return True

    def write(self, vals):
        vals.update({'update_date': time.strftime(TIME_FORMAT),
                     'update_user_id': self.env.user.id})
        return super(CtQuotations, self).write(vals)
    
    def days_conversion(self, period_choices, period):
        tank_lease_qty = 0
        if period_choices == 'month':
           tank_lease_qty = period * 30
        elif period_choices == 'year':
           tank_lease_qty = period * 365
        else:
             tank_lease_qty = period 
        return tank_lease_qty
    
    def _istl_tank_lease(self, vals):
        if vals:
            tank_lease_tariff = self.env['cm.tank.lease.tariff'].search([('business_location','=',vals['bus_location']),\
                  ('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
            service = self.env['cm.service'].search([('id','=',vals['service_id']),('status', '=', 'active'),('active_trans', '=', True)])
            return {
            "header_id": vals['header_id'],
            "chrg_head_id": service.pri_chrg_head_id.id,
            "line_applicable": 'applicable',
            "uom_id": service.pri_chrg_head_id.uom_id.id,
            "qty": vals['trip_days'],
            "unit_price": tank_lease_tariff.operating_cost,
            "currency_id": tank_lease_tariff.currency_id.id,
            "tax_ids": [(6, 0, [tax_id.id for tax_id in service.pri_chrg_head_id.tax_ids if tax_id.id])]
            }       
        
    def _istl_depot_tariff(self, vals):
        depot_tariff_line = []
        product = self.env['cm.product'].search([('id', '=', vals['product_id']),('status', '=', 'active'),('active_trans', '=', True)], limit=1)
        depot_tariff_records = self.env['cm.depot.tariff'].search([('depot_id', '=', vals['drop_depot_id']),\
           ('clean_cate_id', '=', product.clean_cate_id.id),('tank_t_code', '=', vals['tank_t_code']),\
           ('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
        for depot_record in depot_tariff_records.line_ids:
            depot_tariff_line.append({
                "header_id": vals['header_id'],
                "chrg_head_id": depot_record.charges_id.id,
                "line_applicable": 'applicable',
                "uom_id": depot_record.charges_id.uom_id.id,
                "qty": 1,
                "unit_price": depot_record.gr_cost,
                "currency_id": depot_record.currency_id.id,
                "tax_ids": [(6, 0, [tax_id.id for tax_id in depot_record.tax_ids if tax_id.id])]
            })
        return depot_tariff_line   
    
    def _istl_surveyor_tariff(self, vals):
        surveyor_tariff_line = []
        depot_location = self.env['cm.depot.location'].search([('id', '=', vals['drop_depot_id']),\
           ('status', '=', 'active'),('active_trans', '=', True)], limit=1)
        surveyor_domain = [('country_id', '=', depot_location.country_id.id), ('status', '=', 'active'),('active_trans', '=', True)]
        if depot_location.country_id.code == 'IN':
            surveyor_domain.append(('state_id', '=', depot_location.state_id.id))
        surveyor_tariff_records = self.env['cm.surveyor.tariff'].search(surveyor_domain, limit=1, order='eff_from_date desc')
        for surveyor_record in surveyor_tariff_records.line_ids:
            surveyor_tariff_line.append({
                "header_id": vals['header_id'],
                "chrg_head_id": surveyor_record.charges_id.id,
                "line_applicable": 'applicable',
                "uom_id": surveyor_record.charges_id.uom_id.id,
                "qty": 1,
                "unit_price": surveyor_record.gr_cost,
                "currency_id": surveyor_record.currency_id.id,
                "tax_ids": [(6, 0, [tax_id.id for tax_id in surveyor_record.tax_ids if tax_id.id])]
            })
        return surveyor_tariff_line
    
    def _flas_accessories_sale(self, vals):
        accessories_sale_line = []
        if vals:
            service = self.env['cm.service'].search([('id','=',vals['service_id']),('status', '=', 'active'),('active_trans', '=', True)])
            accessories_set_line = self.env['cm.accessories.set.line']
            accessories_set = self.env['cm.accessories.set']
            for line in vals['accessories_line_object']:
                line_unit_price = sum([acc_line.qty * accessories_set_line.search([('header_id', '=', line.accessory_set_id.id),\
                    ('accessories_id', '=', acc_line.accessories_id.id),('header_id.status', '=', 'active'),\
                        ('header_id.active_trans', '=', True)], limit=1).unit_price for acc_line in line.line_ids])
                header_markup = accessories_set.search([('id', '=', line.accessory_set_id.id),\
                    ('status', '=', 'active'),('active_trans', '=', True)], limit=1).markup
                accessories_sale_line.append({
                "header_id": vals['header_id'],
                "chrg_head_id": service.pri_chrg_head_id.id,
                "line_applicable": 'applicable',
                "uom_id": service.pri_chrg_head_id.uom_id.id,
                "qty": line.accessory_set_qty,
                "unit_price": line_unit_price + (line_unit_price *  header_markup / 100),
                "currency_id": self.env['res.currency'].search([('status', '=', 'active'),('active_trans', '=', True),\
                    ('short_name', '=', 'INR')], limit=1).id,
                "tax_ids": [(6, 0, [tax_id.id for tax_id in service.pri_chrg_head_id.tax_ids if tax_id.id])]
                })
        return accessories_sale_line          

    
    def _flbs_tank_lease(self, vals):
        if vals:
            flexi_tariff = self.env['cm.flexi.tariff'].search([('flexi_bag_id','=',vals['flexi_bag_type_id']), ('city_id', '=', vals['city_id']),\
                  ('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
            service = self.env['cm.service'].search([('id','=',vals['service_id']),('status', '=', 'active'),('active_trans', '=', True)])
            return {
            "header_id": vals['header_id'],
            "chrg_head_id": service.pri_chrg_head_id.id,
            "line_applicable": 'applicable',
            "uom_id": service.pri_chrg_head_id.uom_id.id,
            "qty": vals['bag_qty'],
            "unit_price": flexi_tariff.standard_price + ((flexi_tariff.standard_price * flexi_tariff.markup_val) / 100),
            "currency_id": flexi_tariff.currency_id.id,
            "tax_ids": [(6, 0, [tax_id.id for tax_id in flexi_tariff.tax_ids if tax_id.id])]
            }      
            
    def _flos_service(self, vals):
        if vals:
            service = self.env['cm.service'].search([('id','=',vals['service_id']),('status', '=', 'active'),('active_trans', '=', True)])
            return {
            "header_id": vals['header_id'],
            "chrg_head_id": service.pri_chrg_head_id.id,
            "line_applicable": 'applicable',
            "uom_id": service.pri_chrg_head_id.uom_id.id,
            "qty": 1,
            "unit_price": 0,
            "currency_id": self.env['res.currency'].search([('status', '=', 'active'),('active_trans', '=', True),\
                ('short_name', '=', 'INR')], limit=1).id,
            "tax_ids": [(6, 0, [tax_id.id for tax_id in service.pri_chrg_head_id.tax_ids if tax_id.id])],
            }
    
    def _trans_route_distance(self, vals):
        if vals:
            service = self.env['cm.service'].search([('id','=',vals['service_id']),('status', '=', 'active'),('active_trans', '=', True)])
            trans_tariff = self.env['cm.transport.tariff'].search([('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
            return {
            "header_id": vals['header_id'],
            "chrg_head_id": service.pri_chrg_head_id.id,
            "line_applicable": 'applicable',
            "uom_id": service.pri_chrg_head_id.uom_id.id,
            "qty": vals['tot_trip'],
            "unit_price": trans_tariff.fuel_avg_cost / trans_tariff.avg_mileage if trans_tariff.avg_mileage > 0 else 0,
            "currency_id": self.env['res.currency'].search([('status', '=', 'active'),('active_trans', '=', True),\
                ('short_name', '=', 'INR')], limit=1).id,
            "tax_ids": [(6, 0, [tax_id.id for tax_id in service.pri_chrg_head_id.tax_ids if tax_id.id])]
            }
            
    def _trans_maintenance(self, vals):
        if vals:
            trans_route = self.env['cm.transport.route'].search([('id','=',vals['trans_route_id']),\
                  ('status', '=', 'active'),('active_trans', '=', True)], limit=1)
            trans_tariff = self.env['cm.transport.tariff'].search([('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
            trans_tariff_line = self.env['cm.transport.tariff.line'].search([('header_id', '=', trans_tariff.id),\
                                ('minimum', '<=', trans_route.total_trip),('maximum','>=', trans_route.total_trip),
                                ('header_id.status', '=', 'active'),('header_id.active_trans', '=', True)], limit=1)
            return {
            "header_id": vals['header_id'],
            "chrg_head_id": trans_tariff_line.charges_id.id,
            "line_applicable": 'applicable',
            "uom_id": trans_tariff_line.charges_id.uom_id.id,
            "qty": 1,
            "unit_price": trans_tariff_line.value,
            "currency_id": self.env['res.currency'].search([('status', '=', 'active'),('active_trans', '=', True),\
                ('short_name', '=', 'INR')], limit=1).id,
            "tax_ids": [(6, 0, [tax_id.id for tax_id in trans_tariff_line.charges_id.tax_ids if tax_id.id])]
            }      
            
    def _trans_tariff_charges(self, vals):
        trans_tariff_line = []
        trans_tariff = self.env['cm.transport.tariff'].search([('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
        for trans_tariff_record in trans_tariff.line_ids_c:
            trans_tariff_line.append({
                "header_id": vals['header_id'],
                "chrg_head_id": trans_tariff_record.charges_id.id,
                "line_applicable": 'applicable',
                "uom_id": trans_tariff_record.charges_id.uom_id.id,
                "qty": 1,
                "unit_price": trans_tariff_record.value,
                "currency_id": trans_tariff_record.currency_id.id,
                "tax_ids": [(6, 0, [tax_id.id for tax_id in trans_tariff_record.tax_ids if tax_id.id])]
            })
        return trans_tariff_line
    
    def _trans_route_charges(self, vals):
        trans_route_line = []
        trans_route = self.env['cm.transport.route'].search([('id', '=', vals['trans_route_id']),('status', '=', 'active'),\
            ('active_trans', '=', True)], limit=1)
        for trans_route_record in trans_route.line_ids_b:
            trans_route_line.append({
                "header_id": vals['header_id'],
                "chrg_head_id": trans_route_record.charges_id.id,
                "line_applicable": 'applicable',
                "uom_id": trans_route_record.charges_id.uom_id.id,
                "qty": 1,
                "unit_price": trans_route_record.value,
                "currency_id": trans_route_record.currency_id.id,
                "tax_ids": [(6, 0, [tax_id.id for tax_id in trans_route_record.charges_id.tax_ids if tax_id.id])]
            })
        return trans_route_line 
    
    def _trans_misc_charges(self, vals):
        trans_tariff = self.env['cm.transport.tariff'].search([('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
        charges_head = self.env['cm.charges.heads'].search([('short_name', '=', 'MISC'),('status', '=', 'active'),\
            ('active_trans', '=', True)], limit=1)
        return {
                "header_id": vals['header_id'],
                "chrg_head_id": charges_head.id,
                "line_applicable": 'applicable',
                "uom_id": charges_head.uom_id.id,
                "qty": 1,
                "unit_price": vals['tot_transit_days'] + trans_tariff.per_day_trip_margin,
                "currency_id": self.env['res.currency'].search([('status', '=', 'active'),('active_trans', '=', True),\
                ('short_name', '=', 'INR')], limit=1).id,
                "tax_ids": [(6, 0, [tax_id.id for tax_id in charges_head.tax_ids if tax_id.id])]
            }

    def _flos_charges(self, vals):
        if vals:
            service_charges_records = []
            service = self.env['cm.service'].search([('id','=',vals['service_id']),('status', '=', 'active'),('active_trans', '=', True)])
            for service_line in service.line_ids:
               service_charges_records.append({
                    "header_id": vals['header_id'],
                    "chrg_head_id": service_line.name.id,
                    "line_applicable": 'applicable',
                    "uom_id": service_line.name.uom_id.id,
                    "qty": 1,
                    "unit_price": 0,
                    "currency_id": self.env['res.currency'].search([('status', '=', 'active'),('active_trans', '=', True),\
                ('short_name', '=', 'INR')], limit=1).id,
                    "tax_ids": [(6, 0, [tax_id.id for tax_id in service_line.name.tax_ids if tax_id.id])]
                })
            return service_charges_records 
    
    def _flbs_flexi_tariff(self, vals):
        if vals:
            flexi_tariff_records = []
            flexi_tariff = self.env['cm.flexi.tariff'].search([('flexi_bag_id','=',vals['flexi_bag_type_id']), ('city_id', '=', vals['city_id']),\
                  ('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
            service = self.env['cm.service'].search([('id','=',vals['service_id']),('status', '=', 'active'),('active_trans', '=', True)])
            for flexi_tariff_line in flexi_tariff.line_ids:
               flexi_tariff_records.append({
                    "header_id": vals['header_id'],
                    "chrg_head_id": flexi_tariff_line.charges_id.id,
                    "line_applicable": 'applicable',
                    "uom_id": service.pri_chrg_head_id.uom_id.id,
                    "qty": vals['bag_qty'],
                    "unit_price": flexi_tariff_line.gr_cost,
                    "currency_id": flexi_tariff_line.currency_id.id,
                    "tax_ids": [(6, 0, [tax_id.id for tax_id in flexi_tariff_line.tax_ids if tax_id.id])]
                })
            return flexi_tariff_records   
        
    def _flas_flexi_tariff(self, vals):
        if vals:
            flexi_tariff_records = []
            flexi_tariff_ids = self.env['cm.flexi.tariff'].search([('flexi_bag_id','in',vals['flexi_bag_type_ids']),('city_id', '=', vals['city_id']),\
                  ('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
            for flexi_tariff in flexi_tariff_ids:
                for flexi_tariff_line in flexi_tariff.line_ids:
                    flexi_tariff_records.append({
                            "header_id": vals['header_id'],
                            "chrg_head_id": flexi_tariff_line.charges_id.id,
                            "line_applicable": 'applicable',
                            "uom_id": flexi_tariff_line.charges_id.uom_id.id,
                            "qty": 1,
                            "unit_price": flexi_tariff_line.gr_cost,
                            "currency_id": flexi_tariff_line.currency_id.id,
                            "tax_ids": [(6, 0, [tax_id.id for tax_id in flexi_tariff_line.tax_ids if tax_id.id])]
                        })
            return flexi_tariff_records
        
    def find_lease_days(self, service_route, pol, pod):
        if service_route and pol and pod:
            start_port_seq = 0
            end_port_seq = 0
            vessel_service_route = self.env['cm.vessel.service.route'].search([('id', '=', service_route),('status', '=', 'active'),\
                ('active_trans', '=', True)])
            for service_route in vessel_service_route.line_ids.search([], order="entry_seq desc"):
                if pol == service_route.port_id.id:
                    start_port_seq = service_route.entry_seq
                if pod == service_route.port_id.id:
                    end_port_seq = service_route.entry_seq
            skip_pol_port_count = 1
            return sum([line.avg_time for line in vessel_service_route.line_ids if line.entry_seq in [seq for seq in range(start_port_seq + skip_pol_port_count, end_port_seq + skip_pol_port_count)]])
                
    def tank_lease_tariff_maintenance_days(self, vals):
        if vals:
            tank_lease_tariff = self.env['cm.tank.lease.tariff'].search([('business_location','=',vals['bus_location']),\
                  ('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
            return {'avg_trans_days': tank_lease_tariff.avg_trans_days, 're_use_days': tank_lease_tariff.re_use_days }
        
    def _carrier_sea_tariff_line(self, vals):
        if vals:
            unit_price = 0
            carrier_sea_tariff_domain = [('ves_serv_route_id', '=', vals['service_route_id']),\
                ('pol_port_id','=', vals['pol_port_id']),('pod_port_id', '=',vals['pod_port_id']),\
                  ('status', '=', 'active'),('active_trans', '=', True)]
            if 'SOCT' in self.combined_codes and vals['carrier_id']:
                carrier_sea_tariff_domain.append(('carrier_id', '=', vals['carrier_id']))
            carrier_sea_tariff_ids = self.env['cm.carrier.sea.freight.rate'].search(carrier_sea_tariff_domain, limit=1)
            product = self.env['cm.product'].search([('id', '=', vals['product_id']),('status', '=', 'active'),('active_trans', '=', True)], limit=1)
            service = self.env['cm.service'].search([('id', '=', vals['service_id'] ),('status', '=', 'active'),('active_trans', '=', True)], limit=1)
            if vals['dg_product'] == 'yes' and product.dg_product == 'yes':
                if product.pack_grp == '1':
                    unit_price = carrier_sea_tariff_ids.pack_type1
                elif product.pack_grp == '2':
                    unit_price = carrier_sea_tariff_ids.pack_type2
                else:
                    unit_price = carrier_sea_tariff_ids.pack_type3
            else:
                if vals['container_category'] == 'laden':
                    unit_price = carrier_sea_tariff_ids.tot_laden
                else:
                    unit_price = carrier_sea_tariff_ids.mty
            return {
            "header_id": vals['header_id'],
            "chrg_head_id": service.pri_chrg_head_id.id,
            "line_applicable": 'applicable',
            "uom_id": service.pri_chrg_head_id.uom_id.id,
            "qty": 1,
            "unit_price": unit_price,
            "currency_id": carrier_sea_tariff_ids.currency_id.id,
            "tax_ids": [(6, 0, [tax_id.id for tax_id in service.pri_chrg_head_id.tax_ids if tax_id.id])]
            }
                       
    def _door_tariff(self, vals):
        if vals:
            door_tariff_records = []
            door_tariff_ids = self.env['cm.door.tariff'].search([('port_id','in',[vals['pol_port_id'], vals['pod_port_id']]),\
                  ('ship_term_id', '=', vals['ship_term_id']),('status', '=', 'active'),('active_trans', '=', True)])
            for door_tariff in door_tariff_ids:
                for door_tariff_line in door_tariff.line_ids:
                    door_tariff_records.append({
                            "header_id": vals['header_id'],
                            "chrg_head_id": door_tariff_line.charges_id.id,
                            "line_applicable": 'applicable',
                            "uom_id": door_tariff_line.charges_id.uom_id.id,
                            "qty": 1,
                            "unit_price": door_tariff_line.gr_cost,
                            "currency_id": door_tariff_line.currency_id.id,
                            "tax_ids": [(6, 0, [tax_id.id for tax_id in door_tariff_line.tax_ids if tax_id.id])]
                        })
            return door_tariff_records 
        
    def _pol_port_tariff(self, vals):
        if vals:
            port_tariff_records = []
            port_tariff_ids = self.env['cm.port.tariff'].search([('port_id','=', vals['pol_port_id']),('import_export', '=', 'export'),\
                 ('container_category', '=', vals['container_category']),('terminal_id', '=', vals['pol_terminal_id']),
                  ('status', '=', 'active'),('active_trans', '=', True)], order='eff_from_date desc')
            for port_tariff in port_tariff_ids:
                for port_tariff_line in port_tariff.line_ids:
                    port_tariff_records.append({
                            "header_id": vals['header_id'],
                            "chrg_head_id": port_tariff_line.charges_id.id,
                            "line_applicable": 'applicable',
                            "uom_id": port_tariff_line.charges_id.uom_id.id,
                            "qty": 1,
                            "unit_price": port_tariff_line.gr_cost,
                            "currency_id": port_tariff_line.currency_id.id,
                            "tax_ids": [(6, 0, [tax_id.id for tax_id in port_tariff_line.tax_ids if tax_id.id])]
                        })
            return port_tariff_records  
        
    def _pod_port_tariff(self, vals):
        if vals:
            port_tariff_records = []
            port_tariff_ids = self.env['cm.port.tariff'].search([('port_id','=',vals['pod_port_id']),('import_export', '=', 'import'),\
                 ('container_category', '=', vals['container_category']),('terminal_id', '=', vals['pod_terminal_id']),
                  ('status', '=', 'active'),('active_trans', '=', True)], order='eff_from_date desc')
            for port_tariff in port_tariff_ids:
                for port_tariff_line in port_tariff.line_ids:
                    port_tariff_records.append({
                            "header_id": vals['header_id'],
                            "chrg_head_id": port_tariff_line.charges_id.id,
                            "line_applicable": 'applicable',
                            "uom_id": port_tariff_line.charges_id.uom_id.id,
                            "qty": 1,
                            "unit_price": port_tariff_line.gr_cost,
                            "currency_id": port_tariff_line.currency_id.id,
                            "tax_ids": [(6, 0, [tax_id.id for tax_id in port_tariff_line.tax_ids if tax_id.id])]
                        })
            return port_tariff_records                                  
                
    def check_required_services(self, vals, pricing_charges):
        if vals['primary_service_id']:
            verified_charges = []
            service = self.env['cm.service'].search([('id', '=', vals['service_id'] ),('status', '=', 'active'),('active_trans', '=', True)], limit=1)
            service_required_charges =[charges_id.name.id for charges_id in service.line_ids]
            pricing_charges_ids = [charge_id['chrg_head_id'] for charge_id in pricing_charges if int(charge_id['chrg_head_id'])]
            if all(key in pricing_charges_ids for key in service_required_charges):
                return pricing_charges
            else:
                for charge_id in [key for key in service_required_charges if key not in pricing_charges_ids]:
                    charges_heads = self.env['cm.charges.heads'].search([('id', '=', charge_id ),('status', '=', 'active'),('active_trans', '=', True)], limit=1)
                    verified_charges.append({
                                "header_id": vals['header_id'],
                                "chrg_head_id": charges_heads.id,
                                "line_applicable": 'applicable',
                                "uom_id": charges_heads.uom_id.id,
                                "qty": 1,
                                "unit_price": 0,
                                "currency_id":self.env['res.currency'].search([('status', '=', 'active'),('active_trans', '=', True),\
                    ('short_name', '=', 'INR')], limit=1).id,
                                "tax_ids": [(6, 0, [tax_id.id for tax_id in charges_heads.tax_ids if tax_id.id])]
                            })
            return  [*pricing_charges, *verified_charges]

    def flbs_flexi_bag_pricing(self, flexi_bag_type_id, bag_qty, quotations_draft_id):
            accessories_set = self.env['cm.accessories.set'].search([('flexi_bag_id','=',flexi_bag_type_id),\
                  ('status', '=', 'active'),('active_trans', '=', True)], limit=1)
            product_template = self.env['product.template'].search([('id', '=',flexi_bag_type_id), ('status', '=', 'active'),\
                ('active_trans', '=', True)], limit=1)
            return {
                'header_id': quotations_draft_id,
                'accessory_set_id': accessories_set.id,
                'bag_qty': bag_qty,
                'acc_is_required': 'yes' if product_template.bag_costing_method == 'with_accessories' else 'no',
                'line_ids': [(0,0,{
                              'accessories_id': line.accessories_id.id,
                              'uom_id': line.uom_id.id,
                              'qty': line.qty
                              }) for line in accessories_set.line_ids if product_template.bag_costing_method == 'with_accessories']
            }
            
    def istl_pricing_cost(self, vals):
        istl_pricing_cost_lines = []
        required_keys = ['bus_location', 'header_id', 'service_id', 'trip_days',\
            'drop_depot_id', 'tank_t_code', 'product_id']
        if all(key in vals for key in required_keys):
            vals['primary_service_id'] = vals['service_id']
            if 'SOCT' not in self.combined_codes:
                istl_pricing_cost_lines.append(self._istl_tank_lease(vals))
            for depot_line in self._istl_depot_tariff(vals):
                istl_pricing_cost_lines.append(depot_line)
            for surveyor_line in self._istl_surveyor_tariff(vals):
                istl_pricing_cost_lines.append(surveyor_line)
            return istl_pricing_cost_lines
        else:
            missing_keys = [key for key in required_keys if key not in vals]
            raise UserError(f"Missing keys: {missing_keys}")

    def flbs_pricing_cost(self, vals):
        flbs_pricing_cost_lines = []
        required_keys = ['flexi_bag_type_id', 'city_id', 'bag_qty']
        if all(key in vals for key in required_keys):
            vals['primary_service_id'] = vals['service_id']
            flbs_pricing_cost_lines.append(self._flbs_tank_lease(vals))
            for flexi_line in self._flbs_flexi_tariff(vals):
                flbs_pricing_cost_lines.append(flexi_line)               
            return flbs_pricing_cost_lines
        else:
            missing_keys = [key for key in required_keys if key not in vals]
            raise UserError(f"Missing keys: {missing_keys}")
        
    def flas_pricing_cost(self, vals):
        flas_pricing_cost_lines = []
        required_keys = ['service_id', 'accessories_line_object', 'header_id', 'flexi_bag_type_ids', 'city_id']
        if all(key in vals for key in required_keys):
            vals['primary_service_id'] = vals['service_id']
            for accessory_sale in self._flas_accessories_sale(vals):
                flas_pricing_cost_lines.append(accessory_sale)
            for flexi_line in self._flas_flexi_tariff(vals):
                flas_pricing_cost_lines.append(flexi_line)  
            return flas_pricing_cost_lines
        else:
            missing_keys = [key for key in required_keys if key not in vals]
            raise UserError(f"Missing keys: {missing_keys}")  
        
    def flos_pricing_cost(self, vals):
        flos_pricing_cost_lines = []
        required_keys = ['header_id', 'service_id']
        if all(key in vals for key in required_keys):
            vals['primary_service_id'] = vals['service_id']
            flos_pricing_cost_lines.append(self._flos_service(vals))
            for service_line in self._flos_charges(vals):
                flos_pricing_cost_lines.append(service_line)               
            return flos_pricing_cost_lines
        else:
            missing_keys = [key for key in required_keys if key not in vals]
            raise UserError(f"Missing keys: {missing_keys}")

    def trans_pricing_cost(self, vals):
        trans_pricing_cost_lines = []
        required_keys = ['trans_route_id', 'header_id', 'service_id', 'tot_trip', 'tot_transit_days']
        if all(key in vals for key in required_keys):
            vals['primary_service_id'] = vals['service_id']
            trans_pricing_cost_lines.append(self._trans_route_distance(vals))
            trans_pricing_cost_lines.append(self._trans_maintenance(vals))
            trans_pricing_cost_lines.append(self._trans_misc_charges(vals))
            for trans_tariff_line in self._trans_tariff_charges(vals):
                trans_pricing_cost_lines.append(trans_tariff_line)
            for trans_route_line in self._trans_route_charges(vals):
                trans_pricing_cost_lines.append(trans_route_line)                
            return trans_pricing_cost_lines
        else:
            missing_keys = [key for key in required_keys if key not in vals]
            raise UserError(f"Missing keys: {missing_keys}") 
        
    def oste_pricing_cost(self, vals):
        oste_pricing_cost_lines = []
        required_keys = ['bus_location', 'header_id', 'service_id', 'trip_days','dg_product','cargo_category','service_route_id',\
            'drop_depot_id', 'tank_t_code', 'product_id', 'pol_free_days', 'pod_free_days','container_category','pol_terminal_id',\
            'ship_term_id', 'rep_service_route_id', 'rep_pol_port_id', 'rep_pod_port_id', 'rep_is_required', 'pod_terminal_id']
        if all(key in vals for key in required_keys):
            oste_pricing_cost_lines.append(self._carrier_sea_tariff_line(vals))
            istl_vals = vals.copy()
            vals['primary_service_id'] = vals['service_id']
            istl_vals['service_id'] = self.env['cm.service'].search([('sys_ref', '=', 'ISTL'),('status', '=', 'active'),\
                ('active_trans', '=', True)], limit=1).id
            for istl_line in self.istl_pricing_cost(istl_vals):
                oste_pricing_cost_lines.append(istl_line)
            for door_tariff_line in self._door_tariff(vals):
                oste_pricing_cost_lines.append(door_tariff_line)
            for pol_port_tariff_line in self._pol_port_tariff(vals):
                oste_pricing_cost_lines.append(pol_port_tariff_line)
            for pod_port_tariff_line in self._pod_port_tariff(vals):
                oste_pricing_cost_lines.append(pod_port_tariff_line)                
            return oste_pricing_cost_lines
        else:
            missing_keys = [key for key in required_keys if key not in vals]
            raise UserError(f"Missing keys: {missing_keys}")    
        
    def dotr_pricing_cost(self, vals):  
        dotr_pricing_cost_lines = []
        required_keys = ['bus_location', 'header_id', 'service_id', 'trip_days','trans_route_id',\
            'drop_depot_id', 'tank_t_code', 'product_id','tot_transit_days', 'tot_trip']
        if all(key in vals for key in required_keys):
            vals['primary_service_id'] = vals['service_id']
            dotl_vals = vals.copy()
            dotl_vals['service_id'] = self.env['cm.service'].search([('sys_ref', '=', 'DOTL'),('status', '=', 'active'),\
                ('active_trans', '=', True)], limit=1).id
            for istl_line in self.istl_pricing_cost(dotl_vals):
                dotr_pricing_cost_lines.append(istl_line)
            trans_vals = vals.copy()
            trans_vals['service_id'] = self.env['cm.service'].search([('sys_ref', '=', 'TRAN'),('status', '=', 'active'),\
                ('active_trans', '=', True)], limit=1).id            
            for trans_line in self.trans_pricing_cost(trans_vals):
                dotr_pricing_cost_lines.append(trans_line)             
            return dotr_pricing_cost_lines
        else:
            missing_keys = [key for key in required_keys if key not in vals]
            raise UserError(f"Missing keys: {missing_keys}")
        
    def _istl_line_creation(self):
        vals = {'header_id': self.id,
                'service_id': self.service_id.id,
                'drop_depot_id': self.drop_depot_id.id,
                'tank_t_code': self.tank_t_code,
                'product_id': self.product_id.id,
                'bus_location': self.bus_location}
        sequence = 1
        tank_lease_tariff = self.env['cm.tank.lease.tariff'].search([('business_location','=',vals['bus_location']),\
                  ('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
        self.estimated_days = self.days_conversion(self.period_choices, self.lease_period)
        self.cleaning_days = tank_lease_tariff.re_use_days
        vals['trip_days'] = self.tot_days
        for line in  self.check_required_services(vals, self.istl_pricing_cost(vals)):
            line['entry_seq'] = sequence
            self.line_ids_c.create(line)
            sequence += 1

    def _flbs_line_creation(self):
        vals = {'header_id': self.id,
                'service_id': self.service_id.id,
                'bag_qty': self.bag_qty,
                'flexi_bag_type_id': self.flexi_bag_type_id.id,
                'city_id': self.city_id.id} 
        sequence = 1
        for line in self.check_required_services(vals, self.flbs_pricing_cost(vals)):
            line['entry_seq'] = sequence
            self.line_ids_c.create(line)
            sequence += 1
        self.line_ids_b = False
        self.line_ids_b.create(self.flbs_flexi_bag_pricing(self.flexi_bag_type_id.id, self.bag_qty, self.id))
        return True         
    
    def _flas_line_creation(self):
        vals = {'header_id': self.id,
                'service_id': self.service_id.id,
                'accessories_line_object': self.line_ids,
                'city_id': self.city_id.id,
                'flexi_bag_type_ids': [line.accessory_set_id.flexi_bag_id.id for line in self.line_ids]}
        sequence = 1
        for line in self.check_required_services(vals, self.flas_pricing_cost(vals)):
            line['entry_seq'] = sequence
            self.line_ids_c.create(line)
            sequence += 1
        return True      
    
    def _flos_line_creation(self):
        vals = {'header_id': self.id,
                'service_id': self.service_id.id} 
        sequence = 1
        for line in  self.check_required_services(vals, self.flos_pricing_cost(vals)):
            line['entry_seq'] = sequence
            self.line_ids_c.create(line)
            sequence += 1
        return True  

    def _trans_line_creation(self):
        vals = {'header_id': self.id,
                'service_id': self.service_id.id,
                'trans_route_id': self.trans_route_id.id,
                'tot_trip': self.tot_trip,
                'tot_transit_days': self.tot_transit_days}
        sequence = 1
        for line in self.check_required_services(vals, self.trans_pricing_cost(vals)):
            line['entry_seq'] = sequence
            self.line_ids_c.create(line)
            sequence += 1
        return True   
    
    def _oste_line_creation(self):
        vals = {
                'header_id': self.id,
                'service_id': self.service_id.id,
                'bus_location': self.bus_location,
                'trip_days': False,
                'drop_depot_id': self.trip_pickup_depot_id.id,
                'tank_t_code': self.tank_t_code,
                'product_id': self.product_id.id,
                'pol_port_id': self.pol_port_id.id, 
                'pod_port_id': self.pod_port_id.id,
                'pol_free_days': self.pol_free_days,
                'pod_free_days': self.pod_free_days,
                'dg_product': self.dg_product,
                'container_category' : self.container_category,
                'service_route_id': self.vessel_route_id.id,
                'pol_terminal_id': self.pol_terminal_id.id,
                'pod_terminal_id': self.pod_terminal_id.id,                
                'ship_term_id': self.ship_term_id.id,
                'cargo_category': 'dg' if self.dg_product == 'yes' else 'non_dg',
                'rep_is_required': self.rep_is_required,
                'rep_service_route_id': self.rep_route_id.id,
                'rep_pol_port_id': self.overseas_port_id.id,
                'rep_pod_port_id': self.pol_port_id.id}
        
        repositioning_days = 0
        if self.rep_is_required == 'yes':
                repositioning_days = self.find_lease_days( self.rep_route_id.id, self.overseas_port_id.id, self.pol_port_id.id)
        self.estimated_days = self.tank_lease_tariff_maintenance_days(vals)['avg_trans_days'] + repositioning_days + \
            self.pol_free_days + self.pod_free_days + self.find_lease_days( self.vessel_route_id.id, self.pol_port_id.id, self.pod_port_id.id)
        self.cleaning_days = self.tank_lease_tariff_maintenance_days(vals)['re_use_days']
        vals['trip_days'] = self.tot_days
        sequence = 1
        for line in self.check_required_services(vals, self.oste_pricing_cost(vals)):
            line['entry_seq'] = sequence
            self.line_ids_c.create(line)
            sequence += 1
        return True
    
    def _dotr_line_creation(self):
        vals = {
                'header_id': self.id,
                'service_id': self.service_id.id,
                'bus_location': self.bus_location,
                'trip_days': False,
                'drop_depot_id': self.trans_pickup_depot_id.id,
                'tank_t_code': self.tank_t_code,
                'product_id': self.product_id.id,
                'trans_route_id': self.trans_route_id.id,
                'tot_transit_days': self.tot_transit_days,
                'tot_trip': self.tot_trip }
        trans_route = self.env['cm.transport.route'].search([('id', '=', vals['trans_route_id']),('status', '=', 'active'),\
                ('active_trans', '=', True)], limit=1)
        tank_lease_tariff = self.env['cm.tank.lease.tariff'].search([('business_location','=',vals['bus_location']),\
                  ('status', '=', 'active'),('active_trans', '=', True)], limit=1, order='eff_from_date desc')
        free_hrs_day = 1
        vals['trip_days'] = trans_route.trip_days + self.dotr_pol_free_days + \
            self.dotr_pod_free_days + tank_lease_tariff.re_use_days + free_hrs_day
        sequence = 1
        for line in self.check_required_services(vals, self.dotr_pricing_cost(vals)):
            line['entry_seq'] = sequence
            self.line_ids_c.create(line)
            sequence += 1
        return True       
    
    def _soct_line_creation(self):
        vals = {
                'header_id': self.id,
                'service_id': self.service_id.id,
                'bus_location': self.bus_location,
                'trip_days': False,
                'drop_depot_id': self.trip_pickup_depot_id.id,
                'tank_t_code': self.tank_t_code,
                'product_id': self.product_id.id,
                'pol_port_id': self.pol_port_id.id, 
                'pod_port_id': self.pod_port_id.id,
                'pol_free_days': self.pol_free_days,
                'pod_free_days': self.pod_free_days,
                'dg_product': self.dg_product,
                'container_category' : self.container_category,
                'service_route_id': self.vessel_route_id.id,
                'pol_terminal_id': self.pol_terminal_id.id,
                'pod_terminal_id': self.pod_terminal_id.id,                
                'carrier_id' : self.carrier_id.id,
                'cargo_category': 'dg' if self.dg_product == 'yes' else 'non_dg',
                'ship_term_id': self.ship_term_id.id,
                'rep_is_required': self.rep_is_required,
                'rep_service_route_id': self.rep_route_id.id,
                'rep_pol_port_id': self.overseas_port_id.id,
                'rep_pod_port_id': self.pol_port_id.id}
        
        sequence = 1
        repositioning_days = 0
        if self.rep_is_required == 'yes':
                repositioning_days = self.find_lease_days(self.rep_route_id.id, self.overseas_port_id.id, self.pol_port_id.id)
        self.estimated_days = self.tank_lease_tariff_maintenance_days(vals)['avg_trans_days'] + repositioning_days + \
            self.pol_free_days + self.pod_free_days + self.find_lease_days( self.vessel_route_id.id, self.pol_port_id.id, self.pod_port_id.id)
        self.cleaning_days = self.tank_lease_tariff_maintenance_days(vals)['re_use_days']
        vals['trip_days'] = self.tot_days        
        for line in self.check_required_services(vals, self.oste_pricing_cost(vals)):
            line['entry_seq'] = sequence
            self.line_ids_c.create(line)
            sequence += 1
        return True
        
        
    def update_pricing_line(self):
        self.line_ids_c = False
        if 'ISTL' in self.combined_codes:
            self._istl_line_creation()
        if 'DOTL' in self.combined_codes:
           self._istl_line_creation()           
        if 'FLBS' in self.combined_codes:
            self._flbs_line_creation() 
        if 'FLAS' in self.combined_codes:
            self._flas_line_creation()  
        if 'FLOS' in self.combined_codes:
            self._flos_line_creation()
        if 'TRAN' in self.combined_codes:
            self._trans_line_creation()
        if 'OSTE' in self.combined_codes:
            self._oste_line_creation()
        if 'DOTR' in self.combined_codes:
            self._dotr_line_creation()
        if 'SOCT' in self.combined_codes:
            self._soct_line_creation() 
        self._create_quotations_details_line()                               
        return True  
    
    def _create_quotations_details_line(self):
        self.line_ids_g = False
        default_qty = 1
        self.line_ids_g.create({
            "header_id": self.id,
            "chrg_head_id": self.service_id.pri_chrg_head_id.id,
            "description": self.service_id.pri_chrg_head_id.name,
            "uom_id": self.env['uom.uom'].search([('short_name', '=', 'UN'),('status', '=', 'active'),('active_trans', '=', True)], limit=1).id,
            "qty": default_qty,
            "unit_price": self.customer_value if 'ISTL' in self.combined_codes or 'DOTL' in self.combined_codes else self.grand_tot_amt,
            "currency_id": self.quotation_currency_id.id,
            "tot_amt": self.grand_tot_amt
        })                        
        
    @api.model
    def retrieve_dashboard(self):
        result = {
            'all_draft': 0,
            'all_wfa': 0,
            'all_quotation_sent': 0,
            'all_order_released': 0,
            'all_revised': 0,
            'all_cancelled':0,
            'my_draft': 0,
            'my_wfa': 0,
            'my_quotation_sent': 0,
            'my_order_released': 0,
            'my_revised': 0,
            'my_cancelled':0,
            'all_today_count': 0,
            'all_today_value': 0,
            'my_today_count': 0,
            'my_today_value': 0
        }

        quotations = self.env[CT_QUOTATIONS]
        result['all_draft'] = quotations.search_count([('status', '=', 'draft')])
        result['all_wfa'] = quotations.search_count([('status', '=', 'wfa')])
        result['all_quotation_sent'] = quotations.search_count([('status', '=', 'quotation_sent')])
        result['all_order_released'] = quotations.search_count([('status', '=', 'order_released')])
        result['all_revised'] = quotations.search_count([('status', '=', 'revised')])
        result['all_cancelled'] = quotations.search_count([('status', '=', 'cancelled')])
        result['my_draft'] = quotations.search_count([('status', '=', 'draft'), ('user_id', '=', self.env.uid)])
        result['my_wfa'] = quotations.search_count([('status', '=', 'wfa'), ('user_id', '=', self.env.uid)])
        result['my_quotation_sent'] = quotations.search_count([('status', '=', 'quotation_sent'), ('user_id', '=', self.env.uid)])
        result['my_order_released'] = quotations.search_count([('status', '=', 'order_released'), ('user_id', '=', self.env.uid)])
        result['my_revised'] = quotations.search_count([('status', '=', 'cancelled'), ('user_id', '=', self.env.uid)])
        result['my_cancelled'] = quotations.search_count([('status', '=', 'cancelled'), ('user_id', '=', self.env.uid)])
        
        result['all_today_count'] = quotations.search_count([('crt_date', '>=', fields.Date.today())])
        result['all_month_count'] = quotations.search_count([('crt_date', '>=', datetime.today().replace(day=1))])
        result['my_today_count'] = quotations.search_count([('user_id', '=', self.env.uid),('crt_date', '>=', fields.Date.today())])
        result['my_month_count'] = quotations.search_count([('user_id', '=', self.env.uid), ('crt_date', '>=',datetime.today().replace(day=1))])

        return result
