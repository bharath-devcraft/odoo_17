# -*- coding: utf-8 -*-

from odoo import models, fields, api, _
from odoo.addons.custom_properties.decorators import validation,valid_mobile_no,valid_email
import time
from datetime import datetime
from odoo.exceptions import UserError

CT_ENQUIRY = 'ct.enquiry'
RES_USERS = 'res.users'
TIME_FORMAT = '%Y-%m-%d %H:%M:%S'
IR_CONFIG_PARAMETER = 'ir.config_parameter'
IR_SEQUENCE = 'ir.sequence'
CM_PORT = 'cm.port'
CM_DEPOT_LOCATION = 'cm.depot.location'
CM_TRANSPORT_LOCATION = 'cm.transport.location'
CM_CITY = 'cm.city'
CM_PORT_TERMINAL = 'cm.port.terminal'

CUSTOM_STATUS = [
    ('draft', 'Draft'),
    ('rfq_sent', 'RFQ Sent'),
    ('quotation_sent', 'Quotation Sent'),
    ('won', 'Won'),
    ('lost', 'Lost'),
    ('cancelled', 'Cancelled')]

ENTRY_MODE =  [('manual','Manual'),
               ('auto', 'Auto')]

APPLICABLE_OPTION = [('applicable', 'Applicable'),
                     ('not_applicable', 'Not Applicable')]

YES_OR_NO = [('yes', 'Yes'), ('no', 'No')]

TANK_T_CODE = [('t1','T1'),('t2','T2'),('t3','T3'),('t4','T4'),('t5','T5'),('t6','T6'),('t7','T7'),('t8','T8'),('t9','T9'),('t10','T10'),
               ('t11', 'T11'),('t12', 'T12'),('t13', 'T13'),('t14', 'T14'),('t15', 'T16'),('t17', 'T17'),('t18', 'T18'),('t19', 'T19'),('t20', 'T20'),
               ('t21', 'T21'),('t22', 'T22'),('t23', 'T23'),('t50', 'T50'),('t75', 'T75')]

CONTAINER_CATEGORY = [('laden','Laden'), ('empty', 'Empty')]

TRAILER_TYPE = [('20_feet', '20 Feet'), ('40_feet', '40 Feet'), ('both', 'Both')]

POD_SERVICES = [('disposal', 'Disposal'), ('discharge', 'Discharge'), ('both', 'Both'), ('not_required', 'Not Required')]

INSURANCE = [('customer', 'Customer'), ('gmpl', 'GMPL')]

LOCATION = [('pan_india', 'PAN India'), ('exim', 'Exim(Global)')]

PERIOD_CHOICES = [('day', 'Day'), ('month', 'Month'), ('year', 'Year')]

class CtEnquiry(models.Model):
    _name = 'ct.enquiry'
    _description = 'Enquiry'
    _inherit = ['mail.thread', 'mail.activity.mixin', 'avatar.mixin']
    _order = 'entry_date desc,name desc'

    name = fields.Char(string="Enquiry No", readonly=True, index=True, copy=False, size=30, c_rule=True)
    entry_date = fields.Date(string="Entry Date", copy=False, default=fields.Date.today)
    service_id = fields.Many2one('cm.service', string="Service Name", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    generated_user_id = fields.Many2one(RES_USERS, string="Generated By", copy=False, default=lambda self: self.env.user.id, ondelete='restrict')
    enq_source_id = fields.Many2one('cm.enquiry.source', string="Enquiry Source", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    ref_no = fields.Char(string="Customer Reference", copy=False, size=15, tracking=True)
    bkg_party_id = fields.Many2one('cm.customer', string="Booking Party", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    new_bkg_party = fields.Char(string="New Booking Party", copy=False)
    bus_vert_id = fields.Many2one('cm.business.vertical', string="Business Vertical", copy=False, ondelete='restrict',domain=[('status', '=', 'active'),('active_trans', '=', True)])
    contact_person = fields.Char(string="Contact Person", size=50)
    mobile_no = fields.Char(string="Mobile No", copy=False, size=15)
    email = fields.Char(string="Email", copy=False, size=252)
    shipper_cus_id = fields.Many2one('cm.customer', string="Actual Shipper / Customer", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    new_shipper = fields.Char(string="New Shipper", copy=False)
    agent_id = fields.Many2one('cm.agent', string="Agent Name", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    rebate = fields.Selection(selection=APPLICABLE_OPTION, string="Rebate", copy=False)
    cust_rate = fields.Float(string="Customer Indicated Rate")
    currency_id = fields.Many2one('res.currency', string="Currency", copy=False, ondelete='restrict', tracking=True, domain=[('status', '=', 'active'),('active_trans', '=', True)])
    expiry_date = fields.Date(string="Expiry Date", copy=False)


    product_id = fields.Many2one('cm.product', string="Product Name", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    product = fields.Char(string="New Product Name", copy=False)
    dg_product = fields.Selection(selection=YES_OR_NO, string="Dangerous Goods" ,copy=False, c_rule=True)
    un_no = fields.Char(string="UN Number", copy=False)
    sub_class1 = fields.Char(string="Sub Class I", size=10)
    sub_class2 = fields.Char(string="Sub Class II", size=10)
    tank_t_code = fields.Selection(selection=TANK_T_CODE, string="Tank T Code", copy=False)
    tank_capacity = fields.Integer(string="Tank Capacity(KL)", copy=False)
    tank_qty = fields.Integer(string="Tank Quantity(TEUS)", copy=False)
    container_category = fields.Selection(selection=CONTAINER_CATEGORY, string="Empty / Laden", copy=False, default='laden', c_rule=True)
    service_ids = fields.Many2many('cm.service', string="Additional Services", ondelete='restrict', domain="[('status', '=', 'active'),('active_trans', '=', True),('id', '!=', service_id)]")
    spl_req = fields.Text(string="Special Requirements", copy=False)


    ship_term_id = fields.Many2one('cm.shipment.term', string="Shipment Term", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    net_rental = fields.Boolean(string="Net Rental")
    switch_bl_req = fields.Selection(selection=YES_OR_NO, string="Switch BL Required", copy=False, default='no')
    pol_port_id = fields.Many2one(CM_PORT, string="POL", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    pol_terminal_id = fields.Many2one(CM_PORT_TERMINAL, string="POL Terminal", copy=False, ondelete='restrict', domain="[('status', '=', 'active'),('active_trans', '=', True),('port_id', '=', pol_port_id)]")
    pol_free_days = fields.Integer(string="POL Free Days", copy=False)
    pod_port_id = fields.Many2one(CM_PORT, string="POD", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    pod_terminal_id = fields.Many2one(CM_PORT_TERMINAL, string="POD Terminal", copy=False, ondelete='restrict', domain="[('status', '=', 'active'),('active_trans', '=', True),('port_id', '=', pod_port_id)]")
    pod_free_days = fields.Integer(string="POD Free Days", copy=False)
    trip_pickup_depot_id = fields.Many2one(CM_DEPOT_LOCATION, string="Pick Up Depot Location", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    
    
    
    lease_period = fields.Integer(string="Lease Period", copy=False)
    period_choices = fields.Selection(selection=PERIOD_CHOICES, string="Period Choices", copy=False)
    pickup_port_id = fields.Many2one(CM_PORT, string="Pick Up Port Location", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    pickup_depot_id = fields.Many2one(CM_DEPOT_LOCATION, string="Pick Up Depot Location", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    drop_port_id = fields.Many2one(CM_PORT, string="Drop Off Port Location", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    drop_depot_id = fields.Many2one(CM_DEPOT_LOCATION, string="Drop Off Depot Location", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])



    gr_dep_id = fields.Many2one('cm.department', string="GR Department Name", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    prod_weight_kg = fields.Integer(string="Product Weight(Kgs)", copy=False)
    dotr_pod_free_days = fields.Integer(string="POD Free Days", copy=False)
    dotr_pol_free_days = fields.Integer(string="POL Free Days", copy=False)
    trailer_type = fields.Selection(selection=TRAILER_TYPE, string="Trailer Type", copy=False, default='20_feet')
    free_hrs = fields.Integer(string="Free Hrs", copy=False, default=24)
    trans_route_id = fields.Many2one('cm.transport.route', string="Route Name", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    from_trans_loc_id = fields.Many2one(CM_TRANSPORT_LOCATION, string="From Location", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    from_city_id = fields.Many2one(CM_CITY, string="From City", ondelete='restrict', copy=False, domain=[('status', '=', 'active'),('active_trans', '=', True)])
    from_state_id = fields.Many2one('res.country.state', string="From State", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    to_trans_loc_id = fields.Many2one(CM_TRANSPORT_LOCATION, string="To Location", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    to_city_id = fields.Many2one(CM_CITY, string="To City", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    to_state_id = fields.Many2one('res.country.state', string="To State", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    trip_start_date = fields.Date(string="Tentative Trip Start Date", copy=False)
    trans_pickup_depot_id = fields.Many2one(CM_DEPOT_LOCATION, string="Pick Up Depot Location", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    empty_pickup_loc_id = fields.Many2one(CM_TRANSPORT_LOCATION, string="Empty Pickup Location", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    load_address = fields.Char(string="Loading Address", size=252)
    load_zip_code = fields.Char(string="Exact Loading Location Zip Code", copy=False, size=10)
    unload_address = fields.Char(string="Unloading Address", size=252)
    unload_zip_code = fields.Char(string="Exact Unloading Location Zip Code", copy=False, size=10)
    empty_offload_loc_id = fields.Many2one(CM_TRANSPORT_LOCATION, string="Empty Off Loading Location", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])



    flexi_bag_type_id = fields.Many2one('product.template', string="Flexi Bag Type", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True),('custom_type', '=', 'flexi_bag')])
    bag_qty = fields.Float(string="Bag Quantity(Nos)", digits=(2, 3))
    del_address = fields.Char(string="Delivery Address", size=252)
    city_id = fields.Many2one(CM_CITY, string="City", ondelete='restrict', domain="[('status', '=', 'active'),('active_trans', '=', True)]")
    same_as_delivery = fields.Boolean(string="Same As Delivery Address")
    stuff_address = fields.Char(string="Exact Stuffing Address", size=252)
    bag_req_date = fields.Date(string="Bag Required Date", copy=False)
    vendor_id = fields.Many2one('cm.vendor.master', string="Preferred Supplier", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    accessories_req = fields.Selection(selection=YES_OR_NO, string="Accessories Required", copy=False, default='yes')
    pod_services = fields.Selection(selection=POD_SERVICES, string="POD Services", copy=False)


    flexi_stuff_qty = fields.Float(string="Flexi Stuffing Qty", digits=(2, 3))	    
    stuff_date = fields.Date(string="Stuffing Date", copy=False)


    carrier_id = fields.Many2one('cm.carrier', string="Carrier Name", copy=False, ondelete='restrict',domain=[('status', '=', 'active'),('active_trans', '=', True)])
    insurance = fields.Selection(selection=INSURANCE, string="Insurance", copy=False, default='customer')
    tank_test_cert_ids = fields.Many2many('ir.attachment', string="Tank Periodic Test Certificate", ondelete='restrict', check_company=True)
    tank_clean_cert_ids = fields.Many2many('ir.attachment', 'ir_attachment_tank_clean_cert', 'enq_id', 'ir_attach_id', string="Tank Cleaning Certificate", ondelete='restrict', check_company=True)
    remarks = fields.Text(string="Remarks", copy=False)


    draft_name = fields.Char(string="Draft No", copy=False, index=True, readonly=True, size=30)
    draft_date = fields.Date(string="Draft Date", copy=False, default=fields.Date.today)
    executed_user_id = fields.Many2one(RES_USERS, string="Executed By", copy=False, default=lambda self: self.env.user.id, ondelete='restrict', readonly=True)
    bus_location = fields.Selection(selection=LOCATION, string="Location", copy=False)


    rej_remark_id = fields.Many2one('cm.rejection.remark', string="Rejection Remark", copy=False, ondelete='restrict', domain=[('status', '=', 'active'),('active_trans', '=', True)])
    cancel_remark = fields.Text(string="Cancel Remarks", copy=False)
    remarks = fields.Text(string="Remarks", copy=False)
    status = fields.Selection(selection=CUSTOM_STATUS, string="Status", copy=False, default="draft", readonly=True, store=True, tracking=True)
    combined_codes = fields.Char(string="Combined Codes", readonly=True)

    active = fields.Boolean(string="Visible", default=True)
    active_rpt = fields.Boolean(string="Visible In Reports", default=True)
    active_trans = fields.Boolean(string="Visible In Transactions", default=True)
    company_id = fields.Many2one('res.company', copy=False, default=lambda self: self.env.company, ondelete='restrict', readonly=True, domain=[('status', '=', 'active'),('active_trans', '=', True)])
    fy_control_date = fields.Date(string="FY Control Date", related='entry_date', store=True)
    entry_mode = fields.Selection(selection=ENTRY_MODE, string="Entry Mode", copy=False, default="manual", readonly=True, tracking=True)
    user_id = fields.Many2one(RES_USERS, string="Created By", copy=False, default=lambda self: self.env.user.id, ondelete='restrict', readonly=True)
    crt_date = fields.Datetime(string="Creation Date", copy=False, default=fields.Datetime.now, readonly=True)
    confirm_user_id = fields.Many2one(RES_USERS, string="Confirmed By", copy=False, ondelete='restrict', readonly=True)
    confirm_date = fields.Datetime(string="Confirmed Date", copy=False, readonly=True)
    cancel_user_id = fields.Many2one(RES_USERS, string="Cancelled By", copy=False, ondelete='restrict', readonly=True)
    cancel_date = fields.Datetime(string="Cancelled Date", copy=False, readonly=True)
    update_user_id = fields.Many2one(RES_USERS, string="Last Updated By", copy=False, ondelete='restrict', readonly=True)
    update_date = fields.Datetime(string="Last Updated Date", copy=False, readonly=True)

    line_ids = fields.One2many('ct.enquiry.flexi.acc.line', 'header_id', string="Flexi Accessories", copy=True, c_rule=True)
    line_ids_a = fields.One2many('ct.enquiry.attachment.line', 'header_id', string="Attachments", copy=True, c_rule=True)

    @api.onchange('service_id', 'service_ids')
    def onchange_service_ids(self):
        codes = []
        if self.service_id:
            codes.append(self.service_id.sys_ref)
            self.bus_location = self.service_id.bus_location
            if self.service_id.sys_ref in ('ISTL', 'DOTL'):
                self.container_category = 'empty'
            else:
                 self.container_category = 'laden'
        if self.service_ids:
            codes.extend(self.service_ids.mapped('sys_ref'))
        self.combined_codes = list(set(codes))

    @api.onchange('product_id')
    def onchange_product(self):
        if self.product_id:
            self.dg_product = self.product_id.dg_product
            self.un_no = self.product_id.un_no
            self.sub_class1 = self.product_id.sub_class1
            self.sub_class2 = self.product_id.sub_class2
            self.tank_t_code = self.product_id.tank_t_code
        else:
            self.dg_product = False
            self.un_no = False
            self.sub_class1 = False
            self.sub_class2 = False
            self.tank_t_code = False
    
    @api.onchange('trans_route_id')
    def onchange_route_name(self):
        if self.trans_route_id:
            self.from_trans_loc_id = self.trans_route_id.from_location_id.id
            self.to_trans_loc_id = self.trans_route_id.to_location_id.id
        else:
            self.from_trans_loc_id = False
            self.to_trans_loc_id = False
    
    @api.onchange('from_trans_loc_id')
    def onchange_from_location(self):
        if self.from_trans_loc_id:
            self.from_city_id = self.from_trans_loc_id.city_id.id
            self.from_state_id = self.from_trans_loc_id.state_id.id
        else:
            self.from_city_id = False
            self.from_state_id = False
    
    @api.onchange('to_trans_loc_id')
    def onchange_to_location(self):
        if self.to_trans_loc_id:
            self.to_city_id = self.to_trans_loc_id.city_id.id
            self.to_state_id = self.to_trans_loc_id.state_id.id
        else:
            self.to_city_id = False
            self.to_state_id = False

    @api.onchange('bkg_party_id')
    def onchange_booking_party(self):
        if self.bkg_party_id:
            self.bus_vert_id = self.bkg_party_id.bus_vert_id.id
            self.contact_person = self.bkg_party_id.contact_person
            self.mobile_no = self.bkg_party_id.mobile_no
            self.email = self.bkg_party_id.email
        else:
            self.bus_vert_id = False
            self.contact_person = False
            self.mobile_no = False
            self.email = False

    @api.onchange('combined_codes')
    def onchange_combined_codes(self):
        if 'FLAS' not in self.combined_codes:
            self.line_ids = [(5, 0, 0)]
    
    @api.onchange('same_as_delivery')
    def onchange_same_as_delivery(self):
        if self.same_as_delivery:
            self.stuff_address = self.del_address
        else:
            self.stuff_address = False
    
    @api.onchange('pol_port_id')
    def onchange_pol_port_id(self):
        if self.pol_port_id:
            record = self.env[CM_PORT_TERMINAL].search([('status', '=', 'active'), 
                      ('active_trans', '=', True), 
                      ('port_id', '=', self.pol_port_id.id)], limit=2)
            if record and len(record) == 1:
                self.pol_terminal_id = record.id
            else:
                self.pol_terminal_id = False

    @api.onchange('pod_port_id')
    def onchange_pod_port_id(self):
        if self.pod_port_id:
            record = self.env[CM_PORT_TERMINAL].search([('status', '=', 'active'), 
                      ('active_trans', '=', True), 
                      ('port_id', '=', self.pod_port_id.id)], limit=2)
            if record and len(record) == 1:
                self.pod_terminal_id = record.id
            else:
                self.pod_terminal_id = False

    def display_warnings(self, warning_msg, kw):
        if warning_msg:
            formatted_messages = "\n".join(warning_msg)
            if not kw.get('mode_of_call'):
                raise UserError(_(formatted_messages))
            else:
                return [formatted_messages]
        else:
            return False

    def check_negative_values(self, warning_msg):
        for field in self._fields.values():
            if isinstance(field, (fields.Integer, fields.Float)):
                value = getattr(self, field.name, None)
                if value is not None and value < 0:
                    field_label = field.string
                    warning_msg.append(f"{field_label} cannot be less than zero.")

    def validate_fields(self, *fields):
        return not any(fields) or all(fields)

    def validations(self, **kw):
        warning_msg = []

        if self.validate_fields(self.bkg_party_id, self.new_bkg_party):
            warning_msg.append("Either booking party or new booking party only required, not both or neither.")
        if (self.shipper_cus_id or self.new_shipper) and self.validate_fields(self.shipper_cus_id, self.new_shipper):
            warning_msg.append("Either actual shipper/customer or new shipper only required, not both.")
        if self.validate_fields(self.product_id, self.product):
            warning_msg.append("Either product name or new product name only required, not both or neither.")
        if self.combined_codes and any(code in self.combined_codes for code in ('ISTL', 'DOTL')):
            if self.validate_fields(self.pickup_port_id, self.pickup_depot_id):
                warning_msg.append("Either pick up port location or pick up depot location only required, not both or neither.")
        if self.combined_codes and 'FLAS' in self.combined_codes and not self.line_ids:
            warning_msg.append("System not allow to confirm with empty flexi accessories details")
        if self.combined_codes and 'SOCT' in self.combined_codes and not self.tank_test_cert_ids:
            warning_msg.append("Tank Periodic Test Certificate is must")
        if self.combined_codes and 'SOCT' in self.combined_codes and not self.tank_clean_cert_ids:
            warning_msg.append("Tank Cleaning Certificate is must")

        self.check_negative_values(warning_msg)
        
        return self.display_warnings(warning_msg, kw)

    def sequence_no_validations(self, **kw):
        warning_msg = []
        action_code_map = {
            'confirm': CT_ENQUIRY
        }

        action = kw.get('action')
        if action in action_code_map:
            sequence_code = action_code_map[action]
            sequence_id = self.env[IR_SEQUENCE].search([('code', '=', sequence_code)], limit=1)
            if not sequence_id:
                warning_msg.append("The ir sequence has not been created.")
        if kw.get('date'):
            self.env.cr.execute(
                """select value from ir_config_parameter 
                where key = 'custom_properties.seq_num_reset' 
                order by id desc limit 1;
            """)
            seq_reset = self.env.cr.fetchone()
            if not seq_reset or not seq_reset[0]:
                warning_msg.append("The sequence number reset option has not been configured in the custom settings.")
            elif seq_reset[0] == 'fiscal_year':
                fiscal_year = self.env['cm.fiscal.year'].search([
                                ('from_date', '<=', kw.get('date')),('to_date', '>=', kw.get('date')),
                                ('status', '=', 'active'),('active', '=', True)])
                if not fiscal_year:
                    warning_msg.append("The fiscal year has not been created.")

        return self.display_warnings(warning_msg, kw)

    @validation
    def entry_confirm(self):
        if self.status == 'draft':
            self.validations()

            if not self.name:
                sequence_id = self.env[IR_SEQUENCE].search(
                        [('code', '=', CT_ENQUIRY)], limit=1)
                if sequence_id:
                    self.env.cr.execute(
                        """select generatesequenceno(%s,%s,%s,%s,%s,%s) """,
                        (sequence_id.id,
                         sequence_id.code,
                         self.entry_date,
                         None,
                         None,
                         ''))
                    sequence = self.env.cr.fetchone()
                    sequence = sequence[0]
                else:
                    sequence = ''

                if not sequence:
                    self.sequence_no_validations(date=self.entry_date, action='confirm')

                self.name = sequence
                
            self.create_quotations()    
            self.write({'status': 'rfq_sent',
                        'confirm_user_id': self.env.user.id,
                        'confirm_date': time.strftime(TIME_FORMAT)
                        })

            # self.enquiry_mail_data_design(
            #                             trans_rec = self,
            #                             mail_queue_name = 'Enquiry Confirm Mail',
            #                             subject = f"#new-enquiry# {self.service_id.name}",
            #                             mail_config_name = 'Enquiry Confirm Mail'
            #                         )
            # if self.product:
            #     self.enquiry_mail_data_design(
            #                                 trans_rec = self,
            #                                 mail_queue_name = 'New Enquiry Product Confirm Mail',
            #                                 subject = f"#new-enquiry-product# {self.product} - {'DG' if self.dg_product == 'yes' else 'Non DG'}",
            #                                 mail_config_name = 'New Enquiry Product Confirm Mail'
            #                             )

        return True

                      
    def entry_cancel(self):
        if self.status in ('rfq_sent', 'quotation_sent'):
            min_char = self.env[IR_CONFIG_PARAMETER].sudo().get_param('custom_properties.min_char_length')
            if not self.rej_remark_id or (not self.cancel_remark or not self.cancel_remark.strip()):
                raise UserError(_("Cancel reason is must. Kindly enter the cancel reason and remark in cancel reason tab"))
            if self.cancel_remark and len(self.cancel_remark.strip()) < int(min_char):
                raise UserError(_(f"Minimum {min_char} characters are must for cancel remarks"))
            self.write({'status': 'cancelled',
                        'cancel_user_id': self.env.user.id,
                        'cancel_date': time.strftime(TIME_FORMAT)
                        })
        return True

    def unlink(self):
        for rec in self:
            if rec.status != 'draft' or rec.entry_mode == 'auto':
                raise UserError(_("You can't delete other than manually created draft entries"))
            if rec.status == 'draft':
                is_mgmt = self.env[RES_USERS].has_group('cm_user_mgmt.group_mgmt_admin')
                if not is_mgmt:
                    res_config_rule = self.env[IR_CONFIG_PARAMETER].sudo().get_param('custom_properties.del_self_draft_entry')
                    if not res_config_rule and self.user_id != self.env.user and not(is_mgmt):
                        raise UserError(_("You can't delete other users draft entries"))
                models.Model.unlink(rec)
        return True

    def write(self, vals):
        vals.update({'update_date': time.strftime(TIME_FORMAT),
                     'update_user_id': self.env.user.id})
        return super(CtEnquiry, self).write(vals)

    def  get_default_mail_ids(self, **kw):
        mail_ids = {}
        trans_rec = self.env[CT_ENQUIRY].search([('id', '=', kw.get('trans_id', False))])

        if trans_rec and trans_rec.user_id.email:
            mail_ids['email_to'] = [trans_rec.confirm_user_id.email]

        return mail_ids
    
    def enquiry_mail_data_design(self, **kw):
        self.env.cr.execute(
            """select ctm_enquiry_confirm_mail(%s,'%s','%s','%s')""" %
            (self.id,self.status,self.name or self.draft_name, self.env.user.partner_id.name,))
        data = self.env.cr.fetchall()

        trans_rec = kw.get('trans_rec', self)
        mail_queue_name = kw.get('mail_queue_name', '')
        mail_config_name = kw.get('mail_config_name', '')
        mail_type = kw.get('mail_type', 'transaction')

        subject = kw.get('subject', '')

        if trans_rec and data[0][0] and mail_queue_name and subject and mail_config_name:

            mail_ids = self.get_default_mail_ids(trans_id=trans_rec.id)
            default_to = mail_ids.get('email_to',[])

            vals = self.env['cp.mail.configuration'].mail_config_mailids_data(
                mail_type=mail_type, model_name=CT_ENQUIRY, mail_name=mail_config_name)

            email_to = ", ".join(set(default_to + vals.get('email_to', []))) if default_to or vals.get('email_to') else ''
            email_cc = ", ".join(vals.get('email_cc', [])) if vals.get('email_cc') else ''
            email_bcc = ", ".join(vals.get('email_bcc', [])) if vals.get('email_bcc') else ''
            email_from = ", ".join(vals.get('email_from', [])) if vals.get('email_from') else ''

            if trans_rec.line_ids_a:
                attachment = trans_rec.line_ids_a.mapped('attachment_ids')
            else:
                attachment = False

            self.env['cp.mail.queue'].create_mail_queue(
                name = mail_queue_name, trans_rec = trans_rec, mail_from = email_from,
                email_to = email_to, email_cc = email_cc, email_bcc = email_bcc,
                subject = subject, body = data[0][0], attachment=attachment)

        return True


           
    def _istl_line_creation(self, quotation_record):
        quotation_record.update({
                    "lease_period" : self.lease_period,
                    "period_choices" : self.period_choices,
                    "pickup_port_id" : self.pickup_port_id.id,
                    "pickup_depot_id" : self.pickup_depot_id.id,                    
                    "drop_port_id" : self.drop_port_id.id,
                    "drop_depot_id" : self.drop_depot_id.id,                  
                    })
        istl_draft_quotation = self.env['ct.quotations'].create(quotation_record)    
        pricing_line_object = self.env['ct.quotations.pricing.details.line']
        vals = {'header_id': istl_draft_quotation.id,
                'service_id': self.service_id.id,
                'trip_days': istl_draft_quotation.days_conversion(self.period_choices, self.lease_period),
                'drop_depot_id': self.drop_depot_id.id,
                'tank_t_code': self.tank_t_code,
                'product_id': self.product_id.id,
                'bus_location': self.bus_location}
        
        sequence = 1
        for line in istl_draft_quotation.istl_pricing_cost(vals):
            line['entry_seq'] = sequence
            pricing_line_object.create(line)
            sequence += 1
        return True

    def _flbs_line_creation(self, quotation_record):
        quotation_record.update({
                    "flexi_bag_type_id" : self.flexi_bag_type_id.id,
                    "bag_qty" : self.bag_qty,
                    "del_address" : self.del_address,
                    "city_id" : self.city_id.id,
                    "same_as_delivery" : self.same_as_delivery,    
                    "stuff_address" : self.stuff_address,
                    "bag_req_date" : self.bag_req_date,
                    "vendor_id" : self.vendor_id.id,
                    "accessories_req" : self.accessories_req,
                    "pod_services" : self.pod_services                                     
                 })
        
        flbs_draft_quotation = self.env['ct.quotations'].create(quotation_record) 
        pricing_line_object = self.env['ct.quotations.pricing.details.line']
        vals = {'header_id': flbs_draft_quotation.id,
                'service_id': self.service_id.id,
                'bag_qty': self.bag_qty,
                'flexi_bag_type_id': self.flexi_bag_type_id.id,
                'city_id': self.city_id.id} 
        sequence = 1
        for line in flbs_draft_quotation.flbs_pricing_cost(vals):
            line['entry_seq'] = sequence
            pricing_line_object.create(line)
            sequence += 1
        quotations_flexi_bag_pricing = self.env['ct.quotations.flexi.bag.pricing.line']
        quotations_flexi_bag_pricing.create(flbs_draft_quotation.flbs_flexi_bag_pricing(self.flexi_bag_type_id.id, self.bag_qty, flbs_draft_quotation.id))
        return True        
    
    def _flas_line_creation(self, quotation_record):
        quotation_record.update({
                    "city_id": self.city_id.id,
                    "line_ids" : [(0,0,{'accessory_set_id': line.accessory_set_id.id,
                                        'accessory_set_qty': line.accessory_set_qty,
                                        'line_ids': [(0,0,{
                                             'accessories_id': acc_line.accessories_id.id,
                                             'uom_id': acc_line.uom_id.id,
                                             'qty': acc_line.qty}) for acc_line in line.line_ids]}) for line in self.line_ids],                                  
                 })
        flas_draft_quotation = self.env['ct.quotations'].create(quotation_record)     
        pricing_line_object = self.env['ct.quotations.pricing.details.line']
        vals = {'header_id': flas_draft_quotation.id,
                'service_id': self.service_id.id,
                'accessories_line_object': self.line_ids,
                'city_id': self.city_id.id,
                'flexi_bag_type_ids': [line.accessory_set_id.flexi_bag_id.id for line in self.line_ids]}
        sequence = 1
        for line in flas_draft_quotation.flas_pricing_cost(vals):
            line['entry_seq'] = sequence
            pricing_line_object.create(line)
            sequence += 1
        return True     
    
    def _flos_line_creation(self, quotation_record):
        quotation_record.update({
                    "flexi_stuff_qty" : self.flexi_stuff_qty,
                    "stuff_date" : self.stuff_date,
                    "stuff_address" : self.stuff_address                                  
                 })
        flos_draft_quotation = self.env['ct.quotations'].create(quotation_record) 
        pricing_line_object = self.env['ct.quotations.pricing.details.line']
        vals = {'header_id': flos_draft_quotation.id,
                'service_id': self.service_id.id} 
        sequence = 1
        for line in flos_draft_quotation.flos_pricing_cost(vals):
            line['entry_seq'] = sequence
            pricing_line_object.create(line)
            sequence += 1
        return True
    
    def _trans_line_creation(self, quotation_record):
        quotation_record.update({
                    "gr_dep_id" : self.gr_dep_id.id,
                    "prod_weight_kg" : self.prod_weight_kg,
                    "trailer_type" : self.trailer_type,
                    "free_hrs" : self.free_hrs,
                    "trans_route_id" : self.trans_route_id.id,
                    "from_trans_loc_id" : self.from_trans_loc_id.id,
                    "from_city_id" : self.from_city_id.id,
                    "from_state_id" : self.from_state_id.id,
                    "to_trans_loc_id" : self.to_trans_loc_id.id,
                    "to_city_id" : self.to_city_id.id,
                    "to_state_id" : self.to_state_id.id,
                    "empty_pickup_loc_id" : self.empty_pickup_loc_id.id,
                    "load_address" : self.load_address,
                    "load_zip_code" : self.load_zip_code,
                    "unload_address" : self.unload_address,
                    "unload_zip_code" : self.unload_zip_code,
                    "trip_start_date" : self.trip_start_date,
                    "empty_offload_loc_id": self.empty_offload_loc_id.id                                                                                                                                                                                                                                                                                                                   
                 })
        trans_draft_quotation = self.env['ct.quotations'].create(quotation_record) 
        pricing_line_object = self.env['ct.quotations.pricing.details.line']
        vals = {'header_id': trans_draft_quotation.id,
                'service_id': self.service_id.id,
                'trans_route_id': self.trans_route_id.id,
                'tot_trip':  self.trans_route_id.total_trip,
                'tot_transit_days': self.trans_route_id.trip_days} 
        sequence = 1
        for line in trans_draft_quotation.trans_pricing_cost(vals):
            line['entry_seq'] = sequence
            pricing_line_object.create(line)
            sequence += 1
        return True
    
    def _oste_line_creation(self, quotation_record):
        quotation_record.update({
                    "ship_term_id" : self.ship_term_id.id,
                    "net_rental" : self.net_rental,
                    "switch_bl_req" : self.switch_bl_req,
                    "pol_port_id" : self.pol_port_id.id,
                    "pol_free_days" : self.pol_free_days,
                    "pod_port_id" : self.pod_port_id.id,
                    "pod_free_days" : self.pod_free_days,
                    "trip_pickup_depot_id" : self.trip_pickup_depot_id.id,
                    "pol_terminal_id": self.pol_terminal_id.id,
                    "pod_terminal_id": self.pod_terminal_id.id                                                                                                                                                                                                                                                                                                          
                                                                                                                                                                                                                                                                                                          
                 })
        self.env['ct.quotations'].create(quotation_record) 
        return True  
    
    def _soct_line_creation(self, quotation_record):
        quotation_record.update({
                    "ship_term_id" : self.ship_term_id.id,
                    "net_rental" : self.net_rental,
                    "switch_bl_req" : self.switch_bl_req,
                    "pol_port_id" : self.pol_port_id.id,
                    "pol_free_days" : self.pol_free_days,
                    "pod_port_id" : self.pod_port_id.id,
                    "pod_free_days" : self.pod_free_days,
                    "trip_pickup_depot_id" : self.trip_pickup_depot_id.id,
                    "carrier_id": self.carrier_id.id,
                    "insurance": self.insurance,
                    "tank_test_cert_ids": self.tank_test_cert_ids,
                    "tank_clean_cert_ids": self.tank_clean_cert_ids,
                    "pol_terminal_id": self.pol_terminal_id.id,
                    "pod_terminal_id": self.pod_terminal_id.id                                                                                                                                                                                                                                                                                            
                 })
        self.env['ct.quotations'].create(quotation_record) 
        return True           

    def _dotr_line_creation(self, quotation_record):
        quotation_record.update({
                    "gr_dep_id" : self.gr_dep_id.id,
                    "prod_weight_kg" : self.prod_weight_kg,
                    "trailer_type" : self.trailer_type,
                    "free_hrs" : self.free_hrs,
                    "trans_route_id" : self.trans_route_id.id,
                    "from_trans_loc_id" : self.from_trans_loc_id.id,
                    "from_city_id" : self.from_city_id.id,
                    "from_state_id" : self.from_state_id.id,
                    "to_trans_loc_id" : self.to_trans_loc_id.id,
                    "to_city_id" : self.to_city_id.id,
                    "to_state_id" : self.to_state_id.id,
                    "empty_pickup_loc_id" : self.empty_pickup_loc_id.id,
                    "load_address" : self.load_address,
                    "load_zip_code" : self.load_zip_code,
                    "unload_address" : self.unload_address,
                    "unload_zip_code" : self.unload_zip_code,
                    "trip_start_date" : self.trip_start_date,                                                                                                                                                                                                                                                                                                                 
                 })
        dotr_draft_quotation = self.env['ct.quotations'].create(quotation_record) 
        pricing_line_object = self.env['ct.quotations.pricing.details.line']
        vals = {
                'header_id': dotr_draft_quotation.id,
                'service_id': self.service_id.id,
                'bus_location': self.bus_location,
                'trip_days': False,
                'drop_depot_id': self.trip_pickup_depot_id.id,
                'tank_t_code': self.tank_t_code,
                'product_id': self.product_id.id,
                'trans_route_id': self.trans_route_id.id,
                'tot_trip':  self.trans_route_id.total_trip,
                'tot_transit_days': self.trans_route_id.trip_days
                }
        sequence = 1
        for line in dotr_draft_quotation.dotr_pricing_cost(vals):
            line['entry_seq'] = sequence
            pricing_line_object.create(line)
            sequence += 1
        return True

    def create_quotations(self):
        def safe_get_id(field):
            return field.id if field else False

        quotation_record = {
            "enquiry_no": self.name,
            "service_id": safe_get_id(self.service_id),
            "enq_source_id": safe_get_id(self.enq_source_id),
            "ref_no": self.ref_no,
            "bkg_party_id": safe_get_id(self.bkg_party_id),
            "new_bkg_party": self.new_bkg_party,
            "shipper_cus_id": safe_get_id(self.shipper_cus_id),
            "new_shipper": self.new_shipper,
            "agent_id": safe_get_id(self.agent_id),
            "rebate": self.rebate,
            "cust_rate": self.cust_rate,
            "currency_id": safe_get_id(self.currency_id),
            "expiry_date": self.expiry_date,
            "product_id": safe_get_id(self.product_id),
            "product": self.product,
            "dg_product": self.dg_product,
            "un_no": self.un_no,
            "sub_class1": self.sub_class1,
            "sub_class2": self.sub_class2,
            "tank_t_code": self.tank_t_code,
            "tank_capacity": self.tank_capacity,
            "tank_qty": self.tank_qty,
            "container_category": self.container_category,
            "service_ids": [(6, 0, [service_id.id for service_id in self.service_ids])] if self.service_ids else False,
            "spl_req": self.spl_req,
            "draft_name": self.draft_name,
            "draft_date": self.draft_date,
            "generated_user_id": safe_get_id(self.generated_user_id),
            "executed_user_id": safe_get_id(self.executed_user_id),
            "bus_location": self.bus_location,
            "bus_vert_id": safe_get_id(self.bus_vert_id),
            "entry_mode": "auto",
            "contact_person": self.contact_person,
            "mobile_no": self.mobile_no,
            "email": self.email,
            "quotation_currency_id": self.env['res.currency'].search([('status', '=', 'active'),('active_trans', '=', True),\
                ('short_name', '=', 'INR')], limit=1).id if self.bus_location == 'pan_india' else False
        }
        
        service_object = self.env['cm.service']
        if 'ISTL' in self.combined_codes:
            quotation_record["service_id"] = service_object.search([('status', '=', 'active'),('active_trans', '=', True),\
                ('sys_ref', '=', 'ISTL')], limit=1).id
            quotation_record["is_parent"] = True if self.service_id.sys_ref == 'ISTL' else False
            quotation_record['combined_codes'] = "['ISTL']"
            self._istl_line_creation(quotation_record)
        if 'DOTL' in self.combined_codes:
            quotation_record["service_id"] = service_object.search([('status', '=', 'active'),('active_trans', '=', True),\
                ('sys_ref', '=', 'DOTL')], limit=1).id
            quotation_record["is_parent"] = True if self.service_id.sys_ref == 'DOTL' else False            
            quotation_record['combined_codes'] = "['DOTL']"            
            self._istl_line_creation(quotation_record)           
        if 'FLBS' in self.combined_codes:
            quotation_record["service_id"] = service_object.search([('status', '=', 'active'),('active_trans', '=', True),\
                ('sys_ref', '=', 'FLBS')], limit=1).id
            quotation_record["is_parent"] = True if self.service_id.sys_ref == 'FLBS' else False             
            quotation_record['combined_codes'] = "['FLBS']"            
            self._flbs_line_creation(quotation_record) 
        if 'FLAS' in self.combined_codes:
            quotation_record["service_id"] = service_object.search([('status', '=', 'active'),('active_trans', '=', True),\
                ('sys_ref', '=', 'FLAS')], limit=1).id
            quotation_record["is_parent"] = True if self.service_id.sys_ref == 'FLAS' else False              
            quotation_record['combined_codes'] = "['FLAS']"            
            self._flas_line_creation(quotation_record)  
        if 'FLOS' in self.combined_codes:
            quotation_record["service_id"] = service_object.search([('status', '=', 'active'),('active_trans', '=', True),\
                ('sys_ref', '=', 'FLOS')], limit=1).id
            quotation_record["is_parent"] = True if self.service_id.sys_ref == 'FLOS' else False              
            quotation_record['combined_codes'] = "['FLOS']"          
            self._flos_line_creation(quotation_record)
        if 'TRAN' in self.combined_codes:
            quotation_record["service_id"] = service_object.search([('status', '=', 'active'),('active_trans', '=', True),\
                ('sys_ref', '=', 'TRAN')], limit=1).id
            quotation_record["is_parent"] = True if self.service_id.sys_ref == 'TRAN' else False               
            quotation_record['combined_codes'] = "['TRAN']"
            self._trans_line_creation(quotation_record)
        if 'OSTE' in self.combined_codes:
            quotation_record["service_id"] = service_object.search([('status', '=', 'active'),('active_trans', '=', True),\
                ('sys_ref', '=', 'OSTE')], limit=1).id
            quotation_record["is_parent"] = True if self.service_id.sys_ref == 'OSTE' else False             
            quotation_record['combined_codes'] = "['OSTE']"
            self._oste_line_creation(quotation_record)
        if 'DOTR' in self.combined_codes:
            quotation_record["service_id"] = service_object.search([('status', '=', 'active'),('active_trans', '=', True),\
                ('sys_ref', '=', 'DOTR')], limit=1).id
            quotation_record["is_parent"] = True if self.service_id.sys_ref == 'DOTR' else False               
            quotation_record['combined_codes'] = "['DOTR']"
            self._dotr_line_creation(quotation_record)
        if 'SOCT' in self.combined_codes:
            quotation_record["service_id"] = service_object.search([('status', '=', 'active'),('active_trans', '=', True),\
                ('sys_ref', '=', 'SOCT')], limit=1).id
            quotation_record["is_parent"] = True if self.service_id.sys_ref == 'SOCT' else False             
            quotation_record['combined_codes'] = "['SOCT']"
            self._soct_line_creation(quotation_record)                                   
        return True
                

    @api.model
    def retrieve_dashboard(self):
        result = {
            'all_draft': 0,
            'all_rfq_sent': 0,
            'all_quotation_sent': 0,
            'all_won': 0,
            'all_lost': 0,
            'all_cancelled':0,
            'my_draft': 0,
            'my_rfq_sent': 0,
            'my_quotation_sent': 0,
            'my_won': 0,
            'my_lost': 0,
            'my_cancelled':0,
            'all_today_count': 0,
            'all_today_value': 0,
            'my_today_count': 0,
            'my_today_value': 0
        }

        enquiry = self.env[CT_ENQUIRY]
        result['all_draft'] = enquiry.search_count([('status', '=', 'draft')])
        result['all_rfq_sent'] = enquiry.search_count([('status', '=', 'rfq_sent')])
        result['all_quotation_sent'] = enquiry.search_count([('status', '=', 'quotation_sent')])
        result['all_won'] = enquiry.search_count([('status', '=', 'won')])
        result['all_lost'] = enquiry.search_count([('status', '=', 'lost')])
        result['all_cancelled'] = enquiry.search_count([('status', '=', 'cancelled')])
        result['my_draft'] = enquiry.search_count([('status', '=', 'draft'), ('user_id', '=', self.env.uid)])
        result['my_rfq_sent'] = enquiry.search_count([('status', '=', 'rfq_sent'), ('user_id', '=', self.env.uid)])
        result['my_quotation_sent'] = enquiry.search_count([('status', '=', 'quotation_sent'), ('user_id', '=', self.env.uid)])
        result['my_won'] = enquiry.search_count([('status', '=', 'won'), ('user_id', '=', self.env.uid)])
        result['my_lost'] = enquiry.search_count([('status', '=', 'cancelled'), ('user_id', '=', self.env.uid)])
        result['my_cancelled'] = enquiry.search_count([('status', '=', 'cancelled'), ('user_id', '=', self.env.uid)])
        
        result['all_today_count'] = enquiry.search_count([('crt_date', '>=', fields.Date.today())])
        result['all_month_count'] = enquiry.search_count([('crt_date', '>=', datetime.today().replace(day=1))])
        result['my_today_count'] = enquiry.search_count([('user_id', '=', self.env.uid),('crt_date', '>=', fields.Date.today())])
        result['my_month_count'] = enquiry.search_count([('user_id', '=', self.env.uid), ('crt_date', '>=',datetime.today().replace(day=1))])

        return result