# -*- coding: utf-8 -*-
import locale
import time
from datetime import datetime,timedelta
from odoo.addons.custom_properties.decorators import validation
from odoo import api, fields, models, _
from odoo.exceptions import UserError
try:
    from odoo.tools.misc import xlsxwriter
except ImportError:
    import xlsxwriter
import io
import json
import datetime
from odoo.tools import date_utils

RES_COMPANY = 'res.company'
RES_USERS = 'res.users'

DATE_FORMAT = '%d/%m/%Y'

FORMAT_TYPE_OPTIONS = [('excel', 'Excel'),('pdf', 'PDF')]

class CrReport(models.Model):
    _name = 'cr.report'
    _description = 'Custom Report Template'  

    name = fields.Char(string="Report Name" , default='Custom Report Template', index=True, c_rule=True)
    from_date = fields.Date(string="From Date", default=fields.Date.today)
    to_date = fields.Date(string="To Date", default=fields.Date.today)
    company_id = fields.Many2one(RES_COMPANY, copy=False, default=lambda self: self.env.company, ondelete='restrict', readonly=True, required=True)
    partner_ids = fields.Many2many('res.partner', string="Partner Name", ondelete='restrict', check_company=True, domain=[('active', '=', True)])
    format_type = fields.Selection(selection=FORMAT_TYPE_OPTIONS, string="Format Type", nolabel=True, widget='selection')

    generate_date = fields.Datetime(string="Generated Date", copy=False, default=fields.Datetime.now, readonly=True, store=True)
    generate_user_id = fields.Many2one(RES_USERS, string="Generated By", copy=False, default=lambda self: self.env.user.id, readonly=True, store=True)
    
    @api.constrains('from_date', 'to_date')
    def date_validations(self):
        self.onchange_date_validations()

    @api.onchange('from_date', 'to_date')
    def onchange_date_validations(self):
        if self.from_date > fields.Date.today() or self.to_date > fields.Date.today():
           raise UserError(_("Future date is not allowed. Kindly choose correct from & to date"))
        if self.from_date > self.to_date:
            raise UserError("From date should not be greater than to date")

    def generate_report(self):
        for rec in self:
            current_datetime = datetime.datetime.now() + timedelta(hours=5, minutes=30)
            data = {
                'from_date': rec.from_date.strftime(DATE_FORMAT),
                'to_date': rec.to_date.strftime(DATE_FORMAT),
                'report_taken_by': self.env.user.partner_id.name,
                'taken_date': str(current_datetime.strftime("%d/%m/%Y %H:%M")),# sec need remove
                'partner_list': [partner.name for partner in rec.partner_ids],
                'company_name': rec.env.user.company_id.name,
                'trans_details': [{
                              'trans_no': trans_details.name,
                              'date': trans_details.entry_date.strftime(DATE_FORMAT),
                              'partner_name': trans_details.partner_id.name,
                              'division':trans_details.division_id.name,
                              'department':trans_details.department_id.name,
                              'net_amt':trans_details.net_amt,
                              'product_details': [{
                                                  'product_name': trans_line.description,
                                                  'product_category': trans_line.product_id.product_tmpl_id.categ_id.name,
                                                  'brand': trans_line.brand_id.name,
                                                  'uom': trans_line.uom_id.name,
                                                  'qty': trans_line.qty,
                                                  'unitprice_wt': trans_line.unitprice_wt,
                                                  'unit_price': trans_line.unit_price,
                                                  'tax': trans_line.tax_amt,
                                                  'disc_amt': trans_line.disc_amt,
                                                  'line_tot_amt': trans_line.line_tot_amt 
                                                 } for trans_line in self.env['ct.transaction.line'].search([('header_id', '=', trans_details.id)])]

                              } for trans_details in self.env['ct.transaction'].search([('entry_date', '>=', rec.from_date),
                                                                                     ('entry_date', '<=', rec.to_date),\
                                                                                     ('status', 'in', ['approved'])],\
                                                                                     order='entry_date asc')\
                                                                                     if trans_details.partner_id in rec.partner_ids or not rec.partner_ids],
                                                                                     
            }
            if not [trans['product_details'] for trans in data['trans_details']]:
                raise UserError("No data available in given date range.")
            if not [trans_line['product_name'] for trans in data['trans_details'] for trans_line in trans['product_details']]:
                raise UserError("No product data available in given date range.")
            excel = {
                'type': 'ir.actions.report',
                'data': {'model': 'cr.report',
                         'options': json.dumps(data,
                                               default=date_utils.json_default),
                         'output_format': 'xlsx',
                         'report_name': 'Standard_Excel_Report_Template',
                         },
                'report_type': 'xlsx',
            }

            pdf = {'data': data}
            return pdf if rec.format_type == 'pdf' else excel       
    def design_xlsx_report(self, data, response):        
        output = io.BytesIO()
        workbook = xlsxwriter.Workbook(output, {'in_memory': True})
        sheet = workbook.add_worksheet()
         
        font='Arial'
        font_size=10
        bg_color_1 ='#a5f9f7'
        bg_color_2 ='#DCDCDC'

        format1 = workbook.add_format({'font_size': font_size, 'align': 'center', 'bold': True, 'border': 1, 'text_wrap': True,'font_name': font})        
        
        format2 = workbook.add_format({'font_size': font_size, 'bold': True, 'border': 1, 'bg_color': bg_color_1, 'text_wrap': True,'font_name': font, 'align': 'center'})

        format3 = workbook.add_format({'font_size': font_size, 'bold': True, 'border': 1,'font_name': font, 'text_wrap': True})

        sno_format = workbook.add_format({'font_size': font_size,'valign':'vcenter','font_name': font,'border': 1, 'align': 'center'})        
        
        trans_head_format = workbook.add_format({'font_size': font_size, 'align':'left','valign':'vcenter', 'font_name': font,'border': 1, 'text_wrap': True})
        
        trans_line_format_str = workbook.add_format({'font_size': font_size, 'font_name': font,'border': 1, 'text_wrap': True, 'align': 'left'})
        
        trans_line_format_float = workbook.add_format({'font_size': font_size, 'font_name': font,'border': 1, 'text_wrap': True, 'align': 'right'})
        
        grand_total_format = workbook.add_format({'font_size': font_size, 'bold':True, 'font_name': font,'border': 1, 'bg_color': bg_color_2, 'text_wrap': True, 'align': 'center'})
        
        grand_total_format_ans = workbook.add_format({'font_size': font_size, 'bold':True, 'font_name': font,'border': 1, 'bg_color': bg_color_2, 'text_wrap': True, 'align': 'right'})        
         
    
        sheet.merge_range(0, 0, 0, 13 ,
                          "%s"%(data['company_name']), format1)

        sheet.merge_range(1, 0, 1, 13,
                          'Standard Excel Report Template', format1)

        sheet.merge_range(2, 0, 2, 3,
                          "From Date %s: %s"%(' ' * 11,data['from_date']), format3)
        sheet.merge_range(3, 0, 3, 3,
                          "Partner%s: %s"%(' ' * 17, 'Limited' if data['partner_list'] else 'All'), format3)
        sheet.merge_range(4, 0, 4, 3,
                          "Report Taken By   : %s" %(data['report_taken_by']), format3)

        sheet.merge_range(2, 10, 2, 13,
                          "To Date %s: %s"%(' ' * 18,data['to_date']), format3)
        
        sheet.merge_range(3, 10, 4, 13,
                          "Taken Date & Time  : %s" %(data['taken_date']), format3)


        sheet.write(7, 0, "S.No", format2)
        sheet.set_column('A:A', 5)
        sheet.write(7, 1, "Ref No", format2)
        sheet.set_column('B:B', 16)
        sheet.write(7,2, "Date", format2)
        sheet.set_column('C:C', 9)
        sheet.write(7,3, "Partner Name", format2)
        sheet.set_column('D:D', 14)
        sheet.write(7,4, "Net Amount", format2)
        sheet.set_column('E:E', 14)
        sheet.write(7,5, "Description", format2)
        sheet.set_column('F:F', 18)
        sheet.write(7,6, "Category", format2)
        sheet.set_column('G:G', 18)
        sheet.write(7,7, "Brand", format2)
        sheet.set_column('H:H', 14)
        sheet.write(7,8, "UOM", format2)
        sheet.set_column('I:I', 6)
        sheet.write(7,9, "Quantity", format2)
        sheet.set_column('J:J', 10)
        sheet.write(7,10, "Unit Price", format2)
        sheet.set_column('K:K', 12)
        sheet.write(7,11, "Discount", format2)
        sheet.set_column('L:L', 12)
        sheet.write(7,12, "Tax", format2)
        sheet.set_column('M:M', 12)
        
        sheet.write(7,13, "Total(WT)", format2)
        sheet.set_column('N:N', 12)



        row_num = 8
        s_no = 1
        grand_total = 0
        trans_line_len = 8
        grand_total = 0
        head_row = 8
        for trans in data['trans_details']:
            if trans['product_details']:
                trans_line_len += (len(trans['product_details']) - 1)
                if head_row == trans_line_len:
                    sheet.write(head_row, 0, s_no, sno_format)                    
                    sheet.write(head_row, 1, trans['trans_no'] or '', trans_head_format)
                    sheet.write(head_row, 2, trans['date'], trans_head_format)
                    sheet.write(head_row, 3, trans['partner_name'], trans_head_format)
                    sheet.write(head_row, 4, self.currency_indian_format(trans['net_amt']), trans_line_format_float)
                else:
                    sheet.merge_range(head_row, 0, trans_line_len, 0, s_no, sno_format)
                    sheet.merge_range(head_row, 1, trans_line_len, 1, trans['trans_no'], trans_head_format)
                    sheet.merge_range(head_row, 2, trans_line_len, 2, trans['date'], trans_head_format)
                    sheet.merge_range(head_row, 3, trans_line_len, 3, trans['partner_name'], trans_head_format)
                    sheet.merge_range(head_row, 4, trans_line_len, 4, self.currency_indian_format(trans['net_amt']), trans_line_format_float)
                for trans_line in trans['product_details']:
                    sheet.write(row_num, 5, trans_line['product_name'], trans_line_format_str)
                    sheet.write(row_num, 6, trans_line['product_category'], trans_line_format_str)
                    sheet.write(row_num, 7, trans_line['brand'] or '', trans_line_format_str)
                    sheet.write(row_num, 8, trans_line['uom'] or '', trans_line_format_str)
                    sheet.write(row_num, 9, "{:.3f}".format(trans_line['qty']), trans_line_format_float)
                    sheet.write(row_num, 10, self.currency_indian_format(trans_line['unit_price']), trans_line_format_float)
                    sheet.write(row_num, 11, self.currency_indian_format(trans_line['disc_amt']), trans_line_format_float)
                    sheet.write(row_num, 12, self.currency_indian_format(trans_line['tax']), trans_line_format_float)
                    sheet.write(row_num, 13, self.currency_indian_format(trans_line['line_tot_amt']), trans_line_format_float)
                    
                    row_num += 1
                grand_total += trans['net_amt']
                trans_line_len += 1
                head_row = trans_line_len
                s_no += 1

        sheet.merge_range(1 + head_row, 2, 1 + head_row, 3,"Grand Total", grand_total_format)
        sheet.write(1 + head_row,4,self.currency_indian_format(grand_total), grand_total_format_ans)
        workbook.close()
        output.seek(0)
        response.stream.write(output.read())
        output.close()

    @validation
    def generate_action(self):
        if self.format_type == 'excel':
            return self.generate_report()
        else:
            self.generate_report()
            report_action = self.env.ref('cr_report.cr_report_register')
            return report_action.report_action(self)

    def currency_indian_format(self,amount):
        try:
            locale.setlocale(locale.LC_ALL, 'en_IN')
            formatted_amount = locale.format_string("%0.2f", amount, grouping=True)
            return formatted_amount
        except Exception:
            return "{:.2f}".format(amount)
    
    def write(self,vals):
        vals.update({'generate_date': time.strftime('%Y-%m-%d %H:%M:%S'),'generate_user_id':self.env.user.id})
        return super(CrReport, self).write(vals)


  
